{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"files_",
				"files_scanner_video"
			],
			[
				"Coun",
				"counter\tPyQt Functions"
			],
			[
				"print",
				"print\tPyQt Functions"
			]
		]
	},
	"buffers":
	[
		{
			"file": "refactor/requirements.md",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "refactor/modules.md",
			"settings":
			{
				"buffer_size": 60,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "audio_synth_mixes_resized_wand.py",
			"settings":
			{
				"buffer_size": 4102,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Flimage_numpy_PIL_blur_wand.py",
			"settings":
			{
				"buffer_size": 5463,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "wand_test.py",
			"settings":
			{
				"buffer_size": 24,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Python27/Lib/site-packages/wand/image.py",
			"settings":
			{
				"buffer_size": 140070,
				"line_ending": "Unix"
			}
		},
		{
			"file": "files_scanner.py",
			"settings":
			{
				"buffer_size": 1062,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1770 files for \"audio\"\n\nD:\\Videos\\Shortly_say\\video_shaker\\audio_basic.py:\n   23  \n   24  clips = []\n   25: for i, objects in enumerate(files_scanner_audio(path)):\n   26  \tfor j in range(0,3):\n   27: \t\tclips.append(generate_sequence(files_scanner_audio(path)[i], i + random.uniform(0, 4)))\n   28: \tfor n, objects in enumerate(files_scanner_audio(path)):\n   29: \t\tif n < len(files_scanner_audio(path)):\n   30: \t\t\tclips.append(generate_sequence(files_scanner_audio(path)[n-1], i + random.uniform(0, 3)))\n   31  \n   32  \n   ..\n   35  # clip_in = generate_sequence(clip, 1.90)\n   36  # clip_in2 = generate_sequence(clip2, 5)\n   37: clipOut = concatenate_audioclips(clips)\n   38: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n   39: clipOut.write_audiofile(\"./\" + write_data + \"-out.mp3\")\n   40  \n   41  \"\"\"\n\nD:\\Videos\\Shortly_say\\video_shaker\\audio_images_video_mixer.py:\n   21  path = '../shaker/'\n   22  pathImages = '../imgShaker'\n   23: pathAudio = '../audioShaker'\n   24  print(files_scanner_video(path))\n   25  print(files_scanner_images(pathImages, 1))\n   ..\n   36  \tclipsList = files_scanner_video(path)\n   37  \timagesList = files_scanner_images(pathImages, 1)\n   38: \taudioList\n   39  \tclipsCounter = len(clipsList) - 1\n   40  \timagesCounter = len(imagesList) - 1\n   41: \taudioImages = lin\n   42  \tfor i, objects in enumerate(clipsList[::1]):\n   43  \t\tfor j in range(0,3):\n\nD:\\Videos\\Shortly_say\\video_shaker\\basic(broken).py:\n   69  # print(clips)\n   70  # print(clips[0])\n   71: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n   72  print(clips)\n   73  clipOut = concatenate_videoclips(clips, method='compose')\n\nD:\\Videos\\Shortly_say\\video_shaker\\basic2(old).py:\n   91  # clip_in2 = generate_sequence(clip2, 5)\n   92  clipOut = concatenate_videoclips(clips)\n   93: clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n   94  \n   95  \"\"\"\n\nD:\\Videos\\Shortly_say\\video_shaker\\files_scanner.py:\n   11  \treturn filesList\n   12  \n   13: def files_scanner_audio(path):\n   14  \tfiles = os.listdir(path)\n   15  \tfilesList = []\n   16  \tsourceFile = []\n   17  \tfor i, filenames in enumerate(os.listdir(path)):\n   18: \t    filesList.append(AudioFileClip(os.path.join(path, filenames)))\n   19  \treturn filesList\n   20  \n\nD:\\Videos\\Shortly_say\\video_shaker\\Flimage_numpy_PIL_blur_works.py:\n  151  # print(clips)\n  152  # print(clips[0])\n  153: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  154  \n  155  def concat_and_write(clips, exec_numb):\n\nD:\\Videos\\Shortly_say\\video_shaker\\Flimage_numpy_PIL_shaders.py:\n  163  # print(clips)\n  164  # print(clips[0])\n  165: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  166  \n  167  def concat_and_write(clips, exec_numb):\n\nD:\\Videos\\Shortly_say\\video_shaker\\Flimage_numpy_works.py:\n  142  # print(clips)\n  143  # print(clips[0])\n  144: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  145  \n  146  def concat_and_write(clips, exec_numb):\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_experimage.py:\n  115  # print(clips)\n  116  # print(clips[0])\n  117: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  118  def concat_and_write(clips, exec_numb):\n  119  \twrite_data = time.strftime(\"%I%M%S\")\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_experiments.py:\n  100  # print(clips)\n  101  # print(clips[0])\n  102: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  103  def concat_and_write(clips, exec_numb):\n  104  \twrite_data = time.strftime(\"%I%M%S\")\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_oneclip_fl_image.py:\n  144  # print(clips)\n  145  # print(clips[0])\n  146: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  147  \n  148  def concat_and_write(clips, exec_numb):\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_oneclip_stacking.py:\n  110  # print(clips)\n  111  # print(clips[0])\n  112: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  113  def concat_and_write(clips, exec_numb):\n  114  \twrite_data = time.strftime(\"%I%M%S\")\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_oneclip_text_adder.py:\n   25  # Такую хуйню можно слепить воедино сделав панно из идей и объединять их, можно даже делать им разноцветный бэкграунд\n   26  textEffects = [\"Blur\", \"Mirror\", \"BlackCircle\", \"Fractal\", \"DoubleFace\", \"Glitchface\", \"crystallize\", \"маскирование фона\", \"pixelate\", \"face swap\", \"Заедание части\", \"Многократная картинка\", \"мультирендеринг\", \"телевизор\", \"Вылезание персонажа\", \"Datamosh\", \"Reflecting\", \"Текст программы\", \"EyeSize char\"]\n   27: audioEffectsText = [\"8bit\", \"EarRape\", \"Somatik\", \"Музпуп\", \"Звук удара\", \"Ретровейв\"]\n   28  sourceParts = [\"AVGN in TV\", \"Крутое пике\", \"Коммандор-зайчик\", \"Пакет с дерьмом\", \"Смешивание персонажей\", \"dyhanie.mp4\", \"Заедание джойстика\", \"Rebyata.mp4\", \"Ожидал внезапных ударов\", \"синтезаторы\", \"Закон не позволяет реверсить\", \"Либо - движение утки\"]\n   29  memesText = [\"Pepe\", \"БлэдНэвэльный\", \"У меня лапки\"]\n   ..\n   67  \t\ttextIterate = random.randint(0, len(sourceParts)-1)\n   68  \t\tclips[i] = add_rand_placed_text(clips[i], sourceParts[textIterate])\n   69: \t\ttextIterate = random.randint(0, len(audioEffectsText)-1)\n   70: \t\tclips[i] = add_rand_placed_text(clips[i], audioEffectsText[textIterate])\n   71  \t\ttextIterate = random.randint(0, len(memesText)-1)\n   72  \t\tclips[i] = add_rand_placed_text(clips[i], memesText[textIterate])\n\nD:\\Videos\\Shortly_say\\video_shaker\\Good_random_glitches_oneclip_wordmix.py:\n  100  # print(clips)\n  101  # print(clips[0])\n  102: # clipOut.write_videofile(\"./\" + write_data + \"-out.avi\",fps=25,codec='libx264',audio_codec='pcm_s16le')\n  103  def concat_and_write(clips, exec_numb):\n  104  \twrite_data = time.strftime(\"%I%M%S\")\n\nD:\\Videos\\Shortly_say\\video_shaker\\moviepy_effetcs.py:\n   39  \n   40  # final_clip.write_videofile('../../audrey.avi',fps=charade.fps,\n   41: #                         codec = \"mpeg4\", audio_bitrate=\"3000k\")\n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\bower.json:\n   14          \"url\": \"https://github.com/muaz-khan/RecordRTC.git\"\n   15     },\n   16:   \"description\": \"RecordRTC is a JavaScript library can be used to record WebRTC audio/video media streams.\",\n   17    \"main\": \"RecordRTC.js\",\n   18    \"keywords\": [\n   19      \"webrtc\",\n   20      \"recordrtc\",\n   21:     \"audio-recording\",\n   22      \"video-recording\",\n   23      \"gif-recording\",\n   24:     \"audio/video recording\"\n   25    ],\n   26    \"license\": \"MIT\",\n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\index.html:\n    9  \n   10  <head>\n   11:     <title>RecordRTC | WebRTC Audio+Video+Screen Recording</title>\n   12      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n   13      <meta charset=\"utf-8\">\n   ..\n   64          }\n   65  \n   66:         .recordrtc audio {\n   67              vertical-align: bottom;\n   68          }\n   ..\n   89          <header style=\"text-align: center;\">\n   90              <h1>\n   91:                 RecordRTC | WebRTC Audio+Video+Screen Recording\n   92              </h1>\n   93              <p style=\"margin:0;margin-bottom:-30px;\">\n   ..\n  113              <h2 class=\"header\">\n  114                  <select class=\"recording-media\">\n  115:                     <option value=\"record-audio-plus-video\">Microphone+Camera</option>\n  116:                     <option value=\"record-audio\">Microphone</option>\n  117                      <option value=\"record-screen\">Full Screen</option>\n  118:                     <option value=\"record-audio-plus-screen\">Microphone+Screen</option>\n  119                  </select>\n  120  \n  ...\n  228                  }, false);\n  229  \n  230:                 stream.getAudioTracks().forEach(function(track) {\n  231                      track.addEventListener(streamEndedEvent, function() {\n  232                          callback();\n  ...\n  395  \n  396                  if(mediaContainerFormat.value === 'pcm') {\n  397:                     mimeType = 'audio/wav';\n  398                      fileExtension = 'wav';\n  399:                     recorderType = StereoAudioRecorder;\n  400:                     type = 'audio';\n  401                  }\n  402  \n  403                  if(mediaContainerFormat.value === 'opus' || mediaContainerFormat.value === 'ogg') {\n  404:                     if(isMimeTypeSupported('audio/webm')) {\n  405:                         mimeType = 'audio/webm';\n  406                          fileExtension = 'webm'; // webm\n  407                      }\n  408  \n  409:                     if(isMimeTypeSupported('audio/ogg')) {\n  410:                         mimeType = 'audio/ogg';\n  411                          fileExtension = 'ogg'; // ogg\n  412                      }\n  413  \n  414                      recorderType = null;\n  415:                     type = 'audio';\n  416                  }\n  417  \n  ...\n  437                  }\n  438  \n  439:                 if(recordingMedia.value === 'record-audio') {\n  440:                     captureAudio(commonConfig);\n  441  \n  442                      button.mediaCapturedCallback = function() {\n  ...\n  465  \n  466                          if(webrtcDetectedBrowser === 'edge') {\n  467:                             options.numberOfAudioChannels = 1;\n  468                          }\n  469  \n  ...\n  480                  }\n  481  \n  482:                 if(recordingMedia.value === 'record-audio-plus-video') {\n  483:                     captureAudioPlusVideo(commonConfig);\n  484  \n  485                      button.mediaCapturedCallback = function() {\n  ...\n  488  \n  489                              if(!params.bufferSize) {\n  490:                                 // it fixes audio issues whilst recording 720p\n  491                                  params.bufferSize = 16384;\n  492                              }\n  493  \n  494                              var options = {\n  495:                                 type: 'audio', // hard-code to set \"audio\"\n  496                                  leftChannel: params.leftChannel || false,\n  497                                  disableLogs: params.disableLogs || false,\n  ...\n  526  \n  527                              options.ignoreMutedMedia = true;\n  528:                             var audioRecorder = RecordRTC(button.stream, options);\n  529  \n  530                              options.type = type;\n  531                              var videoRecorder = RecordRTC(button.stream, options);\n  532  \n  533:                             // to sync audio/video playbacks in browser!\n  534                              videoRecorder.initRecorder(function() {\n  535:                                 audioRecorder.initRecorder(function() {\n  536:                                     audioRecorder.startRecording();\n  537                                      videoRecorder.startRecording();\n  538                                      btnPauseRecording.style.display = '';\n  ...\n  540                              });\n  541  \n  542:                             button.recordRTC.push(audioRecorder, videoRecorder);\n  543  \n  544                              button.recordingEndedCallback = function() {\n  545:                                 var audio = new Audio();\n  546:                                 audio.src = audioRecorder.toURL();\n  547:                                 audio.controls = true;\n  548:                                 audio.autoplay = true;\n  549  \n  550                                  recordingPlayer.parentNode.appendChild(document.createElement('hr'));\n  551:                                 recordingPlayer.parentNode.appendChild(audio);\n  552  \n  553:                                 if(audio.paused) audio.play();\n  554                              };\n  555                              return;\n  ...\n  656                  }\n  657  \n  658:                 // note: audio+tab is supported in Chrome 50+\n  659:                 // todo: add audio+tab recording\n  660:                 if(recordingMedia.value === 'record-audio-plus-screen') {\n  661:                     captureAudioPlusScreen(commonConfig);\n  662  \n  663                      button.mediaCapturedCallback = function() {\n  ...\n  710              }\n  711  \n  712:             function captureAudio(config) {\n  713:                 captureUserMedia({audio: true}, function(audioStream) {\n  714:                     config.onMediaCaptured(audioStream);\n  715  \n  716:                     addStreamStopListener(audioStream, function() {\n  717                          config.onMediaStopped();\n  718                      });\n  ...\n  722              }\n  723  \n  724:             function captureAudioPlusVideo(config) {\n  725:                 captureUserMedia({video: true, audio: true}, function(audioVideoStream) {\n  726:                     config.onMediaCaptured(audioVideoStream);\n  727  \n  728:                     if(audioVideoStream instanceof Array) {\n  729:                         audioVideoStream.forEach(function(stream) {\n  730                              addStreamStopListener(stream, function() {\n  731                                  config.onMediaStopped();\n  ...\n  735                      }\n  736  \n  737:                     addStreamStopListener(audioVideoStream, function() {\n  738                          config.onMediaStopped();\n  739                      });\n  ...\n  762                  window.getScreenId = function(chromeMediaSource, chromeMediaSourceId) {\n  763                      var screenConstraints = {\n  764:                         audio: false,\n  765                          video: {\n  766                              mandatory: {\n  ...\n  811              }\n  812  \n  813:             function captureAudioPlusScreen(config) {\n  814                  // Firefox screen capturing addon is open-sourced here: https://github.com/muaz-khan/Firefox-Extensions\n  815                  // Google Chrome screen capturing extension is open-sourced here: https://github.com/muaz-khan/Chrome-Extensions/tree/master/desktopCapture\n  ...\n  817                  window.getScreenId = function(chromeMediaSource, chromeMediaSourceId) {\n  818                      var screenConstraints = {\n  819:                         audio: false,\n  820                          video: {\n  821                              mandatory: {\n  ...\n  831                                  mediaSource: 'window'\n  832                              },\n  833:                             audio: false\n  834                          }\n  835                      }\n  836  \n  837                      captureUserMedia(screenConstraints, function(screenStream) {\n  838:                         captureUserMedia({audio: true}, function(audioStream) {\n  839                              var newStream = new MediaStream();\n  840  \n  841:                             // merge audio and video tracks in a single stream\n  842:                             audioStream.getAudioTracks().forEach(function(track) {\n  843                                  newStream.addTrack(track);\n  844                              });\n  ...\n 1076  \n 1077              recordingMedia.onchange = function() {\n 1078:                 if(recordingMedia.value === 'record-audio') {\n 1079                      var recordingOptions = [];\n 1080                      \n 1081:                     if(isMimeTypeSupported('audio/webm')) {\n 1082                          recordingOptions.push('opus');\n 1083                      }\n 1084  \n 1085:                     if(isMimeTypeSupported('audio/ogg')) {\n 1086                          recordingOptions.push('ogg');\n 1087                      }\n ....\n 1126                  // so lets disable both video/screen recording options\n 1127  \n 1128:                 console.warn('Neither MediaRecorder API nor webp is supported in ' + DetectRTC.browser.name + '. You cam merely record audio.');\n 1129  \n 1130:                 recordingMedia.innerHTML = '<option value=\"record-audio\">Audio</option>';\n 1131                  setMediaContainerFormat(['pcm']);\n 1132              }\n ....\n 1357                      elem = 'img';\n 1358                  }\n 1359:                 if(type == 'audio') {\n 1360:                     elem = 'audio';\n 1361                  }\n 1362  \n ....\n 1722                  DetectRTC.videoInputDevices.forEach(function(device, idx) {\n 1723                      var mediaConstraints = {\n 1724:                         audio: true,\n 1725                          video: {\n 1726                              mandatory: {},\n ....\n 1733                      if(webrtcDetectedBrowser === 'firefox') {\n 1734                          mediaConstraints = {\n 1735:                             audio: true,\n 1736                              video: {\n 1737                                  deviceId: device.id\n ....\n 1775  \n 1776                          if(recordingMedia.value.toString().search(/video/g) === -1) {\n 1777:                             recordingMedia.value = 'record-audio-plus-video';\n 1778                              recordingMedia.onchange();\n 1779                          }\n ....\n 1855  \n 1856                  <tr style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(248, 248, 248);\">\n 1857:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\">Record Mp3 Audio Files</td>\n 1858                      <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://www.webrtc-experiment.com/RecordRTC/Record-Mp3-or-Wav.html\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Demo</a></td>\n 1859                      <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/Record-Mp3-or-Wav.html\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Source</a></td>\n ....\n 1879  \n 1880                  <tr style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(248, 248, 248);\">\n 1881:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\" colspan=2>Record Audio+Videos in Old Chrome and Merge/Mux on PHP server using Ffmpeg</td>\n 1882                      <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://github.com/muaz-khan/RecordRTC/tree/master/PHP-and-FFmpeg\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Source</a></td>\n 1883                  </tr>\n ....\n 1899  \n 1900                  <tr style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(248, 248, 248);\">\n 1901:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\" colspan=2>Record audio+videos in old chrome and merge/mux inside the browser using Ffmpeg-asm.js</td>\n 1902                      <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://www.webrtc-experiment.com/ffmpeg/\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Source</a></td>\n 1903                  </tr>\n ....\n 1929  \n 1930                  <tr style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(248, 248, 248);\">\n 1931:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\" colspan=2>16khz-audio-recording</td>\n 1932:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/16khz-audio-recording.html\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Source</a></td>\n 1933                  </tr>\n 1934  \n 1935                  <tr style=\"border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(248, 248, 248);\">\n 1936:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\" colspan=2>microsoft-edge-audio-recording</td>\n 1937:                     <td style=\"padding: 6px 13px; border: 1px solid rgb(221, 221, 221);\"><a href=\"https://github.com/muaz-khan/RecordRTC/blob/master/simple-demos/edge-audio-recording.html\" style=\"color: rgb(65, 131, 196); text-decoration: none; background: transparent;\">Source</a></td>\n 1938                  </tr>\n 1939  \n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\package.json:\n   58    },\n   59    \"dependencies\": {},\n   60:   \"description\": \"RecordRTC is a server-less (entire client-side) JavaScript library can be used to record WebRTC audio/video media streams. It supports cross-browser audio/video recording.\",\n   61    \"devDependencies\": {\n   62      \"grunt\": \"0.4.5\",\n   ..\n   79      \"webrtc\",\n   80      \"recordrtc\",\n   81:     \"audio-recording\",\n   82      \"video-recording\",\n   83      \"gif-recording\",\n   84:     \"audio/video recording\"\n   85    ],\n   86    \"license\": \"MIT\",\n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\README.md:\n    1: # RecordRTC: WebRTC JavaScript Library for Audio+Video+Screen Recording\n    2  \n    3  # Demo: https://www.webrtc-experiment.com/RecordRTC/\n    .\n   20  2. [MRecordRTC API Reference](http://RecordRTC.org/MRecordRTC.html)\n   21  3. [MediaStreamRecorder API Reference](http://RecordRTC.org/MediaStreamRecorder.html)\n   22: 5. [StereoAudioRecorder API Reference](http://RecordRTC.org/StereoAudioRecorder.html)\n   23  6. [WhammyRecorder API Reference](http://RecordRTC.org/WhammyRecorder.html)\n   24  7. [Whammy API Reference](http://RecordRTC.org/Whammy.html)\n   ..\n   31  | Browser        | Support           | Features |\n   32  | ------------- |-------------|-------------|\n   33: | Firefox | [Stable](http://www.mozilla.org/en-US/firefox/new/) / [Aurora](http://www.mozilla.org/en-US/firefox/aurora/) / [Nightly](http://nightly.mozilla.org/) | Audio+Video (Both local/remote) |\n   34: | Google Chrome | [Stable](https://www.google.com/intl/en_uk/chrome/browser/) / [Canary](https://www.google.com/intl/en/chrome/browser/canary.html) / [Beta](https://www.google.com/intl/en/chrome/browser/beta.html) / [Dev](https://www.google.com/intl/en/chrome/browser/index.html?extra=devchannel#eula) | Audio+Video (Both local/remote) |\n   35: | Opera | [Stable](http://www.opera.com/) / [NEXT](http://www.opera.com/computer/next)  | Audio+Video (Both local/remote) |\n   36: | Android | [Chrome](https://play.google.com/store/apps/details?id=com.chrome.beta&hl=en) / [Firefox](https://play.google.com/store/apps/details?id=org.mozilla.firefox) / [Opera](https://play.google.com/store/apps/details?id=com.opera.browser) | Audio+Video (Both local/remote) |\n   37: | Microsoft Edge | [Normal Build](https://www.microsoft.com/en-us/windows/microsoft-edge) | **Only Audio** - No Video - No Canvas - No Screen |\n   38  \n   39  ## Frameworks\n   ..\n  102  ```javascript\n  103  var options = {\n  104:     recorderType: StereoAudioRecorder,\n  105:     mimeType: 'audio/wav'\n  106  };\n  107  var recordRTC = RecordRTC(stream, options);\n  ...\n  115  var options = {\n  116      recorderType: MediaStreamRecorder,\n  117:     mimeType: 'audio/webm' // Firefox also supports: \"audio/ogg\"\n  118  };\n  119  var recordRTC = RecordRTC(stream, options);\n  ...\n  124  |Media File|Bitrate/Framerate|encoders|Framesize|additional info|\n  125  | ------------- |-------------|-------------|-------------|-------------|\n  126: |Audio File (WAV) | 1411 kbps | pcm_s16le |44100 Hz|stereo, s16|\n  127  |Video File (WebM)|60 kb/s | (whammy) vp8 codec yuv420p|--|SAR 1:1 DAR 4:3, 1k tbr, 1k tbn, 1k tbc (default)|\n  128  \n  ...\n  136  6. [RecordRTC on Ruby!](https://github.com/cbetta/record-rtc-experiment)\n  137  7. [RecordRTC over Socket.io](https://github.com/muaz-khan/RecordRTC/tree/master/RecordRTC-over-Socketio)\n  138: 8. [ffmpeg-asm.js and RecordRTC! Audio/Video Merging & Transcoding!](https://github.com/muaz-khan/WebRTC-Experiment/tree/master/ffmpeg)\n  139  9. [RecordRTC / PHP / FFmpeg](https://github.com/muaz-khan/RecordRTC/tree/master/PHP-and-FFmpeg)\n  140: 10. [Record Audio and upload to Nodejs server](https://www.npmjs.org/package/record-audio)\n  141  11. [ConcatenateBlobs.js](https://github.com/muaz-khan/ConcatenateBlobs) - Concatenate multiple recordings in single Blob!\n  142: 12. [Remote audio-stream recording](https://www.webrtc-experiment.com/demos/remote-stream-recording.html) or [a real p2p demo](https://www.webrtc-experiment.com/RTCMultiConnection/RecordRTC-and-RTCMultiConnection.html)\n  143  13. [Mp3 or Wav Recording](https://www.webrtc-experiment.com/RecordRTC/Record-Mp3-or-Wav.html)\n  144  14. [Record entire DIV including video, image, textarea, input, drag/move/resize, everything](https://www.webrtc-experiment.com/RecordRTC/Canvas-Recording/)\n  ...\n  185  var Whammy = RecordRTC.Whammy;\n  186  var WhammyRecorder = RecordRTC.WhammyRecorder;\n  187: var StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\n  188  // and so on\n  189  \n  190  var video = new Whammy.Video(100);\n  191: var recorder = new StereoAudioRecorder(stream, options);\n  192  ```\n  193  \n  ...\n  245  }\n  246  \n  247: var mediaConstraints = { video: true, audio: true };\n  248  \n  249  navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\n  ...\n  251  ```\n  252  \n  253: ## Record audio+video\n  254  \n  255: You'll be recording both audio/video in single WebM or Mp4 container.\n  256  \n  257  ```javascript\n  ...\n  263      var options = {\n  264        mimeType: 'video/webm', // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\n  265:       audioBitsPerSecond: 128000,\n  266        videoBitsPerSecond: 128000,\n  267        bitsPerSecond: 128000 // if this line is provided, skip above two\n  ...\n  275  }\n  276  \n  277: var mediaConstraints = { video: true, audio: true };\n  278  \n  279  navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);\n  280  \n  281  btnStopRecording.onclick = function () {\n  282:     recordRTC.stopRecording(function (audioVideoWebMURL) {\n  283:         video.src = audioVideoWebMURL;\n  284  \n  285          var recordedBlob = recordRTC.getBlob();\n  ...\n  289  ```\n  290  \n  291: ## Record only Audio\n  292  \n  293  ```javascript\n  294: var recordRTC = RecordRTC(audioStream, { type: 'audio' });\n  295  recordRTC.startRecording();\n  296: recordRTC.stopRecording(function(audioURL) {\n  297:     audio.src = audioURL;\n  298  \n  299      var recordedBlob = recordRTC.getBlob();\n  ...\n  314  ```\n  315  \n  316: * `type` accepts `video` or `audio` or `canvas` or `gif`\n  317  * `mimeType` accepts [all these values](https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType)\n  318: * `recorderType` accepts `MediaStreamRecorder` or `StereoAudioRecorder` or `WhammyRecorder` or `GifRecorder` or any recorder type from [this page](https://github.com/muaz-khan/RecordRTC/tree/master/dev)\n  319  * `timeSlice` accepts numbers in milliseconds; use this to force intervals-based blobs\n  320  * `checkForInactiveTracks` accepts `true` or `false`; use this to disable default inactive-stream-checker functions\n  321  * `onTimeStamp` it is a function that is called-back by the MediaStreamRecorder; `timeSlice` parameter is required for this function\n  322: * `bitsPerSecond` accepts numbers in bits; applies both to audio and video tracks\n  323: * `audioBitsPerSecond` accepts numbers in bits; applies only to audio tracks\n  324  * `videoBitsPerSecond` accepts numbers in bits; applies only to video tracks\n  325  * `disableLogs` accepts `true` or `false`; use this to disable console logs\n  ...\n  328  * `video` accepts object similar to this: `{width: 320, height: 240}`; pass this parameter for MultiStreamRecorder, CanvasRecorder and WhammyRecorder\n  329  * `canvas` accepts object similar to this: `{width: 320, height: 240}`; pass this parameter for MultiStreamRecorder, CanvasRecorder and WhammyRecorder\n  330: * `sampleRate` used only by the StereoAudioRecorder\n  331: * `bufferSize` used only by the StereoAudioRecorder\n  332: * `numberOfAudioChannels` used only by the StereoAudioRecorder\n  333  \n  334  ## Record Multiple Videos\n  ...\n  374  var msRecorder = recorder.getInternalRecorder();\n  375  if (msRecorder instanceof MultiStreamRecorder) {\n  376:     msRecorder.addStreams([newAudioStream]);\n  377      msRecorder.resetVideoStreams([screenStream]);\n  378  }\n  ...\n  381  Usecases:\n  382  \n  383: 1. You can add more audio and/or video streams during live recording (using `addStreams` method)\n  384  2. You can reset/remove/replace old videos using `resetVideoStreams`\n  385  \n  ...\n  392      yourScreen.height = window.screen.height;\n  393  \n  394:     // now it will record all audios + only_this_screen\n  395      internalRecorder.resetVideoStreams([yourScreen]);\n  396  }\n  ...\n  403      var cameraStreams = getSingleOrMultipleCameraStreams();\n  404  \n  405:     // now it will record all audios + all_your_cameras\n  406      internalRecorder.resetVideoStreams(cameraStreams);\n  407  });\n  ...\n  410  ## `getInternalRecorder`\n  411  \n  412: You can get access to internal recorders e.g. MultiStreamRecorder, MediaStreamRecorder, StereoAudioRecorder, WhammyRecorder etc.\n  413  \n  414  > Use `getInternalRecorder` only after `startRecording`. It may return `NULL` according to RecordRTC current state.\n  ...\n  425          // also it is MultiStreamRecorder instance\n  426          // now we can use these extra methods\n  427:         msRecorder.addStreams([newAudioStream]);\n  428          msRecorder.resetVideoStreams([screenStream]);\n  429      }\n  ...\n  438  ## Echo Issues\n  439  \n  440: Simply set `volume=0` or `muted=true` over `<audio>` or `<video>` element:\n  441  \n  442  ```javascript\n  443  videoElement.muted = true;\n  444: audioElement.muted = true;\n  445  ```\n  446  \n  ...\n  457  \n  458  var mediaConstraints = {\n  459:     audio: {\n  460          mandatory: {\n  461              echoCancellation: false,\n  ...\n  465          },\n  466          optional: [{\n  467:           googAudioMirroring: false\n  468          }]\n  469      },\n  ...\n  578  \n  579  ```javascript\n  580: var audioRecorder = RecordRTC(mediaStream, {\n  581:   recorderType: StereoAudioRecorder\n  582  });\n  583  \n  ...\n  587  \n  588  videoRecorder.initRecorder(function() {\n  589:   audioRecorder.initRecorder(function() {\n  590      // Both recorders are ready to record things accurately\n  591      videoRecorder.startRecording();\n  592:     audioRecorder.startRecording();\n  593    });\n  594  });\n  ...\n  599  1. Both are having same recording duration i.e. length\n  600  2. Video recorder is having no blank frames\n  601: 3. Audio recorder is having no empty buffers\n  602  \n  603: This method is really useful to sync audio/video outputs.\n  604  \n  605  ## `setRecordingDuration`\n  ...\n  651  \n  652  ```javascript\n  653: var audioRecorder = RecordRTC(mediaStream, {\n  654:   recorderType: StereoAudioRecorder\n  655  })\n  656  ```\n  657  \n  658: It means that ALL_BROWSERS will be using [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) i.e. WebAudio API for audio recording.\n  659  \n  660: This feature brings remote audio recording support in Firefox, and local audio recording support in Microsoft Edge.\n  661  \n  662: Note: Chrome `>=50` supports remote audio+video recording.\n  663  \n  664  You can even force `WhammyRecorder` on Firefox however webp format isn't yet supported in standard Firefox builds. It simply means that, you're skipping MediaRecorder API in Firefox.\n  ...\n  676  \n  677  // if it is Firefox, then RecordRTC will be using MediaStreamRecorder.js\n  678: // if it is Chrome or Opera or Edge, then RecordRTC will be using StereoAudioRecorder.js\n  679  var recordVideo = RecordRTC(mediaStream, {\n  680:   type: 'audio'\n  681  });\n  682  ```\n  ...\n  703  ```\n  704  \n  705: ## `numberOfAudioChannels`\n  706  \n  707: You can force [StereoAudioRecorder](http://RecordRTC.org/StereoAudioRecorder.html) to record single-audio-channel only. It allows you reduce WAV file size to half.\n  708  \n  709  ```javascript\n  710: var audioRecorder = RecordRTC(audioStream, {\n  711:   recorderType: StereoAudioRecorder,\n  712:   numberOfAudioChannels: 1 // or leftChannel:true\n  713  });\n  714  ```\n  ...\n  790  ## `bufferSize`\n  791  \n  792: Here is how to customize Buffer-Size for audio recording?\n  793  \n  794  ```javascript\n  795: // From the spec: This value controls how frequently the audioprocess event is\n  796  // dispatched and how many sample-frames need to be processed each call.\n  797  // Lower values for buffer size will result in a lower (better) latency.\n  798: // Higher values will be necessary to avoid audio breakup and glitches\n  799  // bug: how to minimize wav size?\n  800  // workaround? obviously ffmpeg!\n  801  // The size of the buffer (in sample-frames) which needs to\n  802: // be processed each time onprocessaudio is called.\n  803  \n  804  // Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n  805  \n  806  var options = {\n  807:    type: 'audio',\n  808:    recorderType: StereoAudioRecorder,\n  809     bufferSize: 16384\n  810  };\n  811: var recordRTC = RecordRTC(audioStream, options);\n  812  ```\n  813  \n  ...\n  818  ```\n  819  \n  820: If you passed invalid value then you'll get blank audio.\n  821  \n  822  ## `sampleRate`\n  823  \n  824: Here is jow to customize Sample-Rate for audio recording?\n  825  \n  826  ```javascript\n  827  // The sample rate (in sample-frames per second) at which the\n  828: // AudioContext handles audio. It is assumed that all AudioNodes\n  829  // in the context run at this rate. In making this assumption,\n  830  // sample-rate converters or \"varispeed\" processors are not supported\n  831  // in real-time processing.\n  832  // The sampleRate parameter describes the sample-rate of the\n  833: // linear PCM audio data in the buffer in sample-frames per second.\n  834  \n  835  // An implementation must support sample-rates in at least\n  ...\n  837  \n  838  var options = {\n  839:    type: 'audio',\n  840:    recorderType: StereoAudioRecorder,\n  841     sampleRate: 96000\n  842  };\n  843: var recordRTC = RecordRTC(audioStream, options);\n  844  ```\n  845  \n  846  Values for sample-rate must be greater than or equal to 22050 and less than or equal to 96000.\n  847  \n  848: If you passed invalid value then you'll get blank audio.\n  849  \n  850  You can pass custom sample-rate values only on Mac (or additionally maybe on Windows 10).\n  ...\n  855  \n  856  ```javascript\n  857: // record 16khz audio\n  858  var options = {\n  859:    type: 'audio',\n  860:    recorderType: StereoAudioRecorder,\n  861     desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n  862  };\n  863: var recordRTC = RecordRTC(audioStream, options);\n  864  ```\n  865  \n  ...\n  876  ```\n  877  \n  878: Note: For chrome, it will simply auto-set `type:audio or video` parameters to keep supporting `StereoAudioRecorder.js` and `WhammyRecorder.js`.\n  879  \n  880: That is, you can skip passing `type:audio` parameter when you're using `mimeType` parameter.\n  881  \n  882  ## `isMimeTypeSupported`\n  ...\n  894  ```\n  895  \n  896: **Detect Audio Formats:**\n  897  \n  898  ```javascript\n  899: var mimeType = 'audio/mpeg';\n  900  var recorderType = MediaStreamRecorder;\n  901  \n  902  if (isMimeTypeSupported(mimeType) === false) {\n  903      console.log(mimeType, 'is not supported.');\n  904:     mimeType = 'audio/ogg';\n  905  \n  906      if (isMimeTypeSupported(mimeType) === false) {\n  907          console.log(mimeType, 'is not supported.');\n  908:         mimeType = 'audio/webm';\n  909  \n  910          if (isMimeTypeSupported(mimeType) === false) {\n  911              console.log(mimeType, 'is not supported.');\n  912  \n  913:             // fallback to WebAudio solution\n  914:             mimeType = 'audio/wav';\n  915:             recorderType = StereoAudioRecorder;\n  916          }\n  917      }\n  ...\n  966  ## `bitsPerSecond`\n  967  \n  968: The chosen bitrate for the audio and video components of the media. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.\n  969  \n  970  ```javascript\n  971  var options = {\n  972:   mimeType 'video/webm', // or video/mp4 or audio/ogg\n  973    bitsPerSecond: 128000\n  974  };\n  ...\n  976  ```\n  977  \n  978: ## `audioBitsPerSecond`\n  979  \n  980: The chosen bitrate for the audio component of the media.\n  981  \n  982  ```javascript\n  983  var options = {\n  984:   mimeType 'audio/ogg',\n  985:   audioBitsPerSecond: 128000\n  986  };\n  987  var recorder = RecordRTC(mediaStream, options);\n  ...\n 1000  ```\n 1001  \n 1002: ## `onAudioProcessStarted`\n 1003  \n 1004  Note: \"initRecorder\" is preferred over this old hack. Both works similarly.\n 1005  \n 1006: Useful to recover audio/video sync issues inside the browser:\n 1007  \n 1008  ```javascript\n 1009: recordAudio = RecordRTC( stream, {\n 1010:      onAudioProcessStarted: function( ) {\n 1011           recordVideo.startRecording();\n 1012       }\n ....\n 1017  });\n 1018  \n 1019: recordAudio.startRecording();\n 1020  ```\n 1021  \n 1022: `onAudioProcessStarted` fixes shared/exclusive audio gap (a little bit). Because shared audio sometimes causes 100ms delay...\n 1023  sometime about 400-to-500 ms delay.\n 1024: Delay depends upon number of applications concurrently requesting same audio devices and CPU/Memory available.\n 1025  Shared mode is the only mode currently available on 90% of windows systems especially on windows 7.\n 1026  \n ....\n 1053  // get all blobs from disk\n 1054  RecordRTC.getFromDisk('all', function(dataURL, type) {\n 1055:    type == 'audio'\n 1056     type == 'video'\n 1057     type == 'gif'\n ....\n 1059  \n 1060  // or get just single blob\n 1061: RecordRTC.getFromDisk('audio', function(dataURL) {\n 1062:    // only audio blob is returned from disk!\n 1063  });\n 1064  ```\n ....\n 1071  var recordRTC = RecordRTC(mediaStream);\n 1072  recordRTC.startRecording();\n 1073: recordRTC.stopRecording(function(audioURL) {\n 1074:    mediaElement.src = audioURL;\n 1075  });\n 1076  \n 1077  // \"recordRTC\" instance object to invoke \"getFromDisk\" method!\n 1078  recordRTC.getFromDisk(function(dataURL) {\n 1079:    // audio blob is automaticlaly returned from disk!\n 1080  });\n 1081  ```\n ....\n 1115  ## Credits\n 1116  \n 1117: 1. [Recorderjs](https://github.com/mattdiamond/Recorderjs) for audio recording\n 1118  2. [whammy](https://github.com/antimatter15/whammy) for video recording\n 1119  3. [jsGif](https://github.com/antimatter15/jsgif) for gif recording\n ....\n 1122  \n 1123  1. [MediaRecorder API](https://w3c.github.io/mediacapture-record/MediaRecorder.html)\n 1124: 2. [Web Audio API](https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html)\n 1125  3. [Canvas2D](http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/)\n 1126  4. [Media Capture and Streams](http://www.w3.org/TR/mediacapture-streams/)\n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\RecordRTC.js:\n   17  \n   18  /**\n   19:  * {@link https://github.com/muaz-khan/RecordRTC|RecordRTC} is a WebRTC JavaScript library for audio/video as well as screen activity recording. It supports Chrome, Firefox, Opera, Android, and Microsoft Edge. Platforms: Linux, Mac and Windows. \n   20:  * @summary Record audio, video or screen inside the browser.\n   21   * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n   22   * @author {@link http://www.MuazKhan.com|Muaz Khan}\n   ..\n   25   * @example\n   26   * var recorder = RecordRTC(mediaStream or [arrayOfMediaStream], {\n   27:  *     type: 'video', // audio or video or gif or canvas\n   28:  *     recorderType: MediaStreamRecorder || CanvasRecorder || StereoAudioRecorder || Etc\n   29   * });\n   30   * recorder.startRecording();\n   ..\n   32   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n   33   * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n   34:  * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, desiredSampRate: 16000, video: HTMLVideoElement, etc.}\n   35   */\n   36  \n   ..\n  491  \n  492          /**\n  493:          * Get internal recording object (i.e. internal module) e.g. MutliStreamRecorder, MediaStreamRecorder, StereoAudioRecorder or WhammyRecorder etc.\n  494           * @method\n  495           * @memberof RecordRTC\n  ...\n  498           * var msRecorder = recorder.getInternalRecorder();\n  499           * if(msRecorder instanceof MultiStreamRecorder) {\n  500:          *     msRecorder.addStreams([newAudioStream]);\n  501           *     msRecorder.resetVideoStreams([screenStream]);\n  502           * }\n  ...\n  593  \n  594          /**\n  595:          * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n  596           * @property {number} bufferSize - Buffer-size used to encode the WAV container\n  597           * @memberof RecordRTC\n  ...\n  606  \n  607          /**\n  608:          * This works only with {recorderType:StereoAudioRecorder}. Use this property on \"stopRecording\" to verify the encoder's sample-rates.\n  609           * @property {number} sampleRate - Sample-rates used to encode the WAV container\n  610           * @memberof RecordRTC\n  ...\n  619  \n  620          /**\n  621:          * {recorderType:StereoAudioRecorder} returns ArrayBuffer object.\n  622:          * @property {ArrayBuffer} buffer - Audio ArrayBuffer, supported only in Chrome.\n  623           * @memberof RecordRTC\n  624           * @instance\n  ...\n  714  /**\n  715   * This method can be used to get all recorded blobs from IndexedDB storage.\n  716:  * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n  717   * @param {function} callback - Callback function to get all stored blobs.\n  718   * @method\n  ...\n  720   * @example\n  721   * RecordRTC.getFromDisk('all', function(dataURL, type){\n  722:  *     if(type === 'audio') { }\n  723   *     if(type === 'video') { }\n  724   *     if(type === 'gif')   { }\n  ...\n  744  /**\n  745   * This method can be used to store recorded blobs into IndexedDB storage.\n  746:  * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n  747   * @method\n  748   * @memberof RecordRTC\n  749   * @example\n  750   * RecordRTC.writeToDisk({\n  751:  *     audio: audioBlob,\n  752   *     video: videoBlob,\n  753   *     gif  : gifBlob\n  ...\n  757      console.log('Writing recorded blob(s) to disk!');\n  758      options = options || {};\n  759:     if (options.audio && options.video && options.gif) {\n  760:         options.audio.getDataURL(function(audioDataURL) {\n  761              options.video.getDataURL(function(videoDataURL) {\n  762                  options.gif.getDataURL(function(gifDataURL) {\n  763                      DiskStorage.Store({\n  764:                         audioBlob: audioDataURL,\n  765                          videoBlob: videoDataURL,\n  766                          gifBlob: gifDataURL\n  ...\n  769              });\n  770          });\n  771:     } else if (options.audio && options.video) {\n  772:         options.audio.getDataURL(function(audioDataURL) {\n  773              options.video.getDataURL(function(videoDataURL) {\n  774                  DiskStorage.Store({\n  775:                     audioBlob: audioDataURL,\n  776                      videoBlob: videoDataURL\n  777                  });\n  778              });\n  779          });\n  780:     } else if (options.audio && options.gif) {\n  781:         options.audio.getDataURL(function(audioDataURL) {\n  782              options.gif.getDataURL(function(gifDataURL) {\n  783                  DiskStorage.Store({\n  784:                     audioBlob: audioDataURL,\n  785                      gifBlob: gifDataURL\n  786                  });\n  ...\n  796              });\n  797          });\n  798:     } else if (options.audio) {\n  799:         options.audio.getDataURL(function(audioDataURL) {\n  800              DiskStorage.Store({\n  801:                 audioBlob: audioDataURL\n  802              });\n  803          });\n  ...\n  840   * var options = RecordRTCConfiguration(mediaStream, options);\n  841   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n  842:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n  843:  * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, getNativeBlob:true, etc.}\n  844   */\n  845  \n  ...\n  850          } else if (config.recorderType === GifRecorder) {\n  851              config.type = 'gif';\n  852:         } else if (config.recorderType === StereoAudioRecorder) {\n  853:             config.type = 'audio';\n  854          } else if (config.recorderType === MediaStreamRecorder) {\n  855:             if (mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n  856                  config.type = 'video';\n  857:             } else if (mediaStream.getAudioTracks().length && !mediaStream.getVideoTracks().length) {\n  858:                 config.type = 'audio';\n  859:             } else if (!mediaStream.getAudioTracks().length && mediaStream.getVideoTracks().length) {\n  860:                 config.type = 'audio';\n  861              } else {\n  862                  // config.type = 'UnKnown';\n  ...\n  879      }\n  880  \n  881:     // consider default type=audio\n  882      if (!config.type) {\n  883          if (config.mimeType) {\n  ...\n  885          }\n  886          if (!config.type) {\n  887:             config.type = 'audio';\n  888          }\n  889      }\n  ...\n  906   * var recorder = new RecorderType(options);\n  907   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n  908:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n  909:  * @param {object} config - {type:\"video\", disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n  910   */\n  911  \n  ...\n  913      var recorder;\n  914  \n  915:     // StereoAudioRecorder can work with all three: Edge, Firefox and Chrome\n  916:     // todo: detect if it is Edge, then auto use: StereoAudioRecorder\n  917      if (isChrome || isEdge || isOpera) {\n  918          // Media Stream Recording API has not been implemented in chrome yet;\n  919:         // That's why using WebAudio API to record stereo audio in WAV format\n  920:         recorder = StereoAudioRecorder;\n  921      }\n  922  \n  ...\n  941  \n  942      if (isMediaRecorderCompatible() && recorder !== CanvasRecorder && recorder !== GifRecorder && typeof MediaRecorder !== 'undefined' && 'requestData' in MediaRecorder.prototype) {\n  943:         if ((mediaStream.getVideoTracks && mediaStream.getVideoTracks().length) || (mediaStream.getAudioTracks && mediaStream.getAudioTracks().length)) {\n  944:             // audio-only recording\n  945:             if (config.type === 'audio') {\n  946:                 if (typeof MediaRecorder.isTypeSupported === 'function' && MediaRecorder.isTypeSupported('audio/webm')) {\n  947                      recorder = MediaStreamRecorder;\n  948                  }\n  949:                 // else recorder = StereoAudioRecorder;\n  950              } else {\n  951                  // video or screen tracks\n  ...\n  986   * recorder.addStream(MediaStream);\n  987   * recorder.mediaType = {\n  988:  *     audio: true, // or StereoAudioRecorder or MediaStreamRecorder\n  989   *     video: true, // or WhammyRecorder or MediaStreamRecorder\n  990   *     gif: true    // or GifRecorder\n  ...\n  992   * // mimeType is optional and should be set only in advance cases.\n  993   * recorder.mimeType = {\n  994:  *     audio: 'audio/wav',\n  995   *     video: 'video/webm',\n  996   *     gif:   'image/gif'\n  ...\n  999   * @see For further information:\n 1000   * @see {@link https://github.com/muaz-khan/RecordRTC/tree/master/MRecordRTC|MRecordRTC Source Code}\n 1001:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n 1002   */\n 1003  \n ....\n 1006      /**\n 1007       * This method attaches MediaStream object to {@link MRecordRTC}.\n 1008:      * @param {MediaStream} mediaStream - A MediaStream object, either fetched using getUserMedia API, or generated using captureStreamUntilEnded or WebAudio API.\n 1009       * @method\n 1010       * @memberof MRecordRTC\n ....\n 1019  \n 1020      /**\n 1021:      * This property can be used to set the recording type e.g. audio, or video, or gif, or canvas.\n 1022:      * @property {object} mediaType - {audio: true, video: true, gif: true}\n 1023       * @memberof MRecordRTC\n 1024       * @example\n 1025       * var recorder = new MRecordRTC();\n 1026       * recorder.mediaType = {\n 1027:      *     audio: true, // TRUE or StereoAudioRecorder or MediaStreamRecorder\n 1028       *     video: true, // TRUE or WhammyRecorder or MediaStreamRecorder\n 1029       *     gif  : true  // TRUE or GifRecorder\n ....\n 1031       */\n 1032      this.mediaType = {\n 1033:         audio: true,\n 1034          video: true\n 1035      };\n ....\n 1046          var recorderType;\n 1047          var mimeType = this.mimeType || {\n 1048:             audio: null,\n 1049              video: null,\n 1050              gif: null\n 1051          };\n 1052  \n 1053:         if (typeof mediaType.audio !== 'function' && isMediaRecorderCompatible() && mediaStream.getAudioTracks && !mediaStream.getAudioTracks().length) {\n 1054:             mediaType.audio = false;\n 1055          }\n 1056  \n ....\n 1063          }\n 1064  \n 1065:         if (!mediaType.audio && !mediaType.video && !mediaType.gif) {\n 1066:             throw 'MediaStream must have either audio or video tracks.';\n 1067          }\n 1068  \n 1069:         if (!!mediaType.audio) {\n 1070              recorderType = null;\n 1071:             if (typeof mediaType.audio === 'function') {\n 1072:                 recorderType = mediaType.audio;\n 1073              }\n 1074  \n 1075:             this.audioRecorder = new RecordRTC(mediaStream, {\n 1076:                 type: 'audio',\n 1077                  bufferSize: this.bufferSize,\n 1078                  sampleRate: this.sampleRate,\n 1079:                 numberOfAudioChannels: this.numberOfAudioChannels || 2,\n 1080                  disableLogs: this.disableLogs,\n 1081                  recorderType: recorderType,\n 1082:                 mimeType: mimeType.audio,\n 1083                  timeSlice: this.timeSlice,\n 1084                  onTimeStamp: this.onTimeStamp\n ....\n 1086  \n 1087              if (!mediaType.video) {\n 1088:                 this.audioRecorder.startRecording();\n 1089              }\n 1090          }\n ....\n 1098              var newStream = mediaStream;\n 1099  \n 1100:             if (isMediaRecorderCompatible() && !!mediaType.audio && typeof mediaType.audio === 'function') {\n 1101                  var videoTrack = mediaStream.getVideoTracks()[0];\n 1102  \n ....\n 1126              });\n 1127  \n 1128:             if (!mediaType.audio) {\n 1129                  this.videoRecorder.startRecording();\n 1130              }\n 1131          }\n 1132  \n 1133:         if (!!mediaType.audio && !!mediaType.video) {\n 1134              var self = this;\n 1135  \n 1136:             // this line prevents StereoAudioRecorder\n 1137              // todo: fix it\n 1138:             if (isMediaRecorderCompatible() /* && !this.audioRecorder */ ) {\n 1139:                 self.audioRecorder = null;\n 1140                  self.videoRecorder.startRecording();\n 1141              } else {\n 1142                  self.videoRecorder.initRecorder(function() {\n 1143:                     self.audioRecorder.initRecorder(function() {\n 1144                          // Both recorders are ready to record things accurately\n 1145                          self.videoRecorder.startRecording();\n 1146:                         self.audioRecorder.startRecording();\n 1147                      });\n 1148                  });\n ....\n 1174       * @example\n 1175       * recorder.stopRecording(function(recording){\n 1176:      *     var audioBlob = recording.audio;\n 1177       *     var videoBlob = recording.video;\n 1178       *     var gifBlob   = recording.gif;\n ....\n 1182          callback = callback || function() {};\n 1183  \n 1184:         if (this.audioRecorder) {\n 1185:             this.audioRecorder.stopRecording(function(blobURL) {\n 1186:                 callback(blobURL, 'audio');\n 1187              });\n 1188          }\n ....\n 1209       */\n 1210      this.pauseRecording = function() {\n 1211:         if (this.audioRecorder) {\n 1212:             this.audioRecorder.pauseRecording();\n 1213          }\n 1214  \n ....\n 1230       */\n 1231      this.resumeRecording = function() {\n 1232:         if (this.audioRecorder) {\n 1233:             this.audioRecorder.resumeRecording();\n 1234          }\n 1235  \n ....\n 1250       * @example\n 1251       * recorder.getBlob(function(recording){\n 1252:      *     var audioBlob = recording.audio;\n 1253       *     var videoBlob = recording.video;\n 1254       *     var gifBlob   = recording.gif;\n 1255       * });\n 1256       * // or\n 1257:      * var audioBlob = recorder.getBlob().audio;\n 1258       * var videoBlob = recorder.getBlob().video;\n 1259       */\n ....\n 1261          var output = {};\n 1262  \n 1263:         if (this.audioRecorder) {\n 1264:             output.audio = this.audioRecorder.getBlob();\n 1265          }\n 1266  \n ....\n 1287       * @example\n 1288       * recorder.getDataURL(function(recording){\n 1289:      *     var audioDataURL = recording.audio;\n 1290       *     var videoDataURL = recording.video;\n 1291       *     var gifDataURL   = recording.gif;\n ....\n 1294      this.getDataURL = function(callback) {\n 1295          this.getBlob(function(blob) {\n 1296:             if (blob.audio && blob.video) {\n 1297:                 getDataURL(blob.audio, function(_audioDataURL) {\n 1298                      getDataURL(blob.video, function(_videoDataURL) {\n 1299                          callback({\n 1300:                             audio: _audioDataURL,\n 1301                              video: _videoDataURL\n 1302                          });\n 1303                      });\n 1304                  });\n 1305:             } else if (blob.audio) {\n 1306:                 getDataURL(blob.audio, function(_audioDataURL) {\n 1307                      callback({\n 1308:                         audio: _audioDataURL\n 1309                      });\n 1310                  });\n ....\n 1368      this.writeToDisk = function() {\n 1369          RecordRTC.writeToDisk({\n 1370:             audio: this.audioRecorder,\n 1371              video: this.videoRecorder,\n 1372              gif: this.gifRecorder\n ....\n 1376      /**\n 1377       * This method can be used to invoke a save-as dialog for all recorded blobs.\n 1378:      * @param {object} args - {audio: 'audio-name', video: 'video-name', gif: 'gif-name'}\n 1379       * @method\n 1380       * @memberof MRecordRTC\n 1381       * @example\n 1382       * recorder.save({\n 1383:      *     audio: 'audio-file-name',\n 1384       *     video: 'video-file-name',\n 1385       *     gif  : 'gif-file-name'\n ....\n 1388      this.save = function(args) {\n 1389          args = args || {\n 1390:             audio: true,\n 1391              video: true,\n 1392              gif: true\n 1393          };\n 1394  \n 1395:         if (!!args.audio && this.audioRecorder) {\n 1396:             this.audioRecorder.save(typeof args.audio === 'string' ? args.audio : '');\n 1397          }\n 1398  \n ....\n 1408  /**\n 1409   * This method can be used to get all recorded blobs from IndexedDB storage.\n 1410:  * @param {string} type - 'all' or 'audio' or 'video' or 'gif'\n 1411   * @param {function} callback - Callback function to get all stored blobs.\n 1412   * @method\n ....\n 1414   * @example\n 1415   * MRecordRTC.getFromDisk('all', function(dataURL, type){\n 1416:  *     if(type === 'audio') { }\n 1417   *     if(type === 'video') { }\n 1418   *     if(type === 'gif')   { }\n ....\n 1423  /**\n 1424   * This method can be used to store recorded blobs into IndexedDB storage.\n 1425:  * @param {object} options - {audio: Blob, video: Blob, gif: Blob}\n 1426   * @method\n 1427   * @memberof MRecordRTC\n 1428   * @example\n 1429   * MRecordRTC.writeToDisk({\n 1430:  *     audio: audioBlob,\n 1431   *     video: videoBlob,\n 1432   *     gif  : gifBlob\n ....\n 1578  }\n 1579  \n 1580: // WebAudio API representer\n 1581: var AudioContext = window.AudioContext;\n 1582  \n 1583: if (typeof AudioContext === 'undefined') {\n 1584:     if (typeof webkitAudioContext !== 'undefined') {\n 1585:         /*global AudioContext:true */\n 1586:         AudioContext = webkitAudioContext;\n 1587      }\n 1588  \n 1589:     if (typeof mozAudioContext !== 'undefined') {\n 1590:         /*global AudioContext:true */\n 1591:         AudioContext = mozAudioContext;\n 1592      }\n 1593  }\n ....\n 1638          };\n 1639  \n 1640:         MediaStream.prototype.getAudioTracks = function() {\n 1641              if (!this.getTracks) {\n 1642                  return [];\n ....\n 1645              var tracks = [];\n 1646              this.getTracks.forEach(function(track) {\n 1647:                 if (track.kind.toString().indexOf('audio') !== -1) {\n 1648                      tracks.push(track);\n 1649                  }\n ....\n 1656      MediaStream.prototype.__stop = MediaStream.prototype.stop;\n 1657      MediaStream.prototype.stop = function() {\n 1658:         this.getAudioTracks().forEach(function(track) {\n 1659              if (!!track.stop) {\n 1660                  track.stop();\n ....\n 1751  \n 1752  /**\n 1753:  * Storage is a standalone object used by {@link RecordRTC} to store reusable objects e.g. \"new AudioContext\".\n 1754   * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n 1755   * @author {@link http://www.MuazKhan.com|Muaz Khan}\n 1756   * @example\n 1757:  * Storage.AudioContext === webkitAudioContext\n 1758:  * @property {webkitAudioContext} AudioContext - Keeps a reference to AudioContext object.\n 1759   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n 1760   */\n ....\n 1762  var Storage = {};\n 1763  \n 1764: if (typeof AudioContext !== 'undefined') {\n 1765:     Storage.AudioContext = AudioContext;\n 1766: } else if (typeof webkitAudioContext !== 'undefined') {\n 1767:     Storage.AudioContext = webkitAudioContext;\n 1768  }\n 1769  \n ....\n 1824   * var config = {\n 1825   *     mimeType: 'video/webm', // vp8, vp9, h264, mkv, opus/vorbis\n 1826:  *     audioBitsPerSecond : 256 * 8 * 1024,\n 1827   *     videoBitsPerSecond : 256 * 8 * 1024,\n 1828   *     bitsPerSecond: 256 * 8 * 1024,  // if this is provided, skip above two\n ....\n 1840   * });\n 1841   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n 1842:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n 1843   * @param {object} config - {disableLogs:true, initCallback: function, mimeType: \"video/webm\", timeSlice: 1000}\n 1844   * @throws Will throw an error if first argument \"MediaStream\" is missing. Also throws error if \"MediaRecorder API\" are not supported by the browser.\n ....\n 1853  \n 1854      if (typeof MediaRecorder === 'undefined') {\n 1855:         throw 'Your browser does not supports Media Recorder API. Please try other modules e.g. WhammyRecorder or StereoAudioRecorder.';\n 1856      }\n 1857  \n ....\n 1861      };\n 1862  \n 1863:     if (config.type === 'audio') {\n 1864:         if (mediaStream.getVideoTracks().length && mediaStream.getAudioTracks().length) {\n 1865              var stream;\n 1866              if (!!navigator.mozGetUserMedia) {\n 1867                  stream = new MediaStream();\n 1868:                 stream.addTrack(mediaStream.getAudioTracks()[0]);\n 1869              } else {\n 1870                  // webkitMediaStream\n 1871:                 stream = new MediaStream(mediaStream.getAudioTracks());\n 1872              }\n 1873              mediaStream = stream;\n 1874          }\n 1875  \n 1876:         if (!config.mimeType || config.mimeType.toString().toLowerCase().indexOf('audio') === -1) {\n 1877:             config.mimeType = isChrome ? 'audio/webm' : 'audio/ogg';\n 1878          }\n 1879  \n 1880:         if (config.mimeType && config.mimeType.toString().toLowerCase() !== 'audio/ogg' && !!navigator.mozGetUserMedia) {\n 1881              // forcing better codecs on Firefox (via #166)\n 1882:             config.mimeType = 'audio/ogg';\n 1883          }\n 1884      }\n ....\n 1931                  }\n 1932  \n 1933:                 recorderHints.mimeType = config.type === 'audio' ? 'audio/webm' : 'video/webm';\n 1934              }\n 1935          }\n ....\n 2220  }\n 2221  \n 2222: // source code from: http://typedarray.org/wp-content/projects/WebAudioRecorder/script.js\n 2223  // https://github.com/mattdiamond/Recorderjs#license-mit\n 2224  // ______________________\n 2225: // StereoAudioRecorder.js\n 2226  \n 2227  /**\n 2228:  * StereoAudioRecorder is a standalone class used by {@link RecordRTC} to bring \"stereo\" audio-recording in chrome.\n 2229:  * @summary JavaScript standalone object for stereo audio recording.\n 2230   * @license {@link https://github.com/muaz-khan/RecordRTC#license|MIT}\n 2231   * @author {@link http://www.MuazKhan.com|Muaz Khan}\n 2232:  * @typedef StereoAudioRecorder\n 2233   * @class\n 2234   * @example\n 2235:  * var recorder = new StereoAudioRecorder(MediaStream, {\n 2236   *     sampleRate: 44100,\n 2237   *     bufferSize: 4096\n ....\n 2242   * });\n 2243   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n 2244:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n 2245:  * @param {object} config - {sampleRate: 44100, bufferSize: 4096, numberOfAudioChannels: 1, etc.}\n 2246   */\n 2247  \n 2248: function StereoAudioRecorder(mediaStream, config) {\n 2249:     if (!mediaStream.getAudioTracks().length) {\n 2250:         throw 'Your stream has no audio tracks.';\n 2251      }\n 2252  \n ....\n 2260      var recording = false;\n 2261      var recordingLength = 0;\n 2262:     var jsAudioNode;\n 2263  \n 2264:     var numberOfAudioChannels = 2;\n 2265  \n 2266      /**\n 2267       * Set sample rates such as 8K or 16K. Reference: http://stackoverflow.com/a/28977136/552182\n 2268       * @property {number} desiredSampRate - Desired Bits per sample * 1000\n 2269:      * @memberof StereoAudioRecorder\n 2270       * @instance\n 2271       * @example\n 2272:      * var recorder = StereoAudioRecorder(mediaStream, {\n 2273       *   desiredSampRate: 16 * 1000 // bits-per-sample * 1000\n 2274       * });\n ....\n 2278      // backward compatibility\n 2279      if (config.leftChannel === true) {\n 2280:         numberOfAudioChannels = 1;\n 2281      }\n 2282  \n 2283:     if (config.numberOfAudioChannels === 1) {\n 2284:         numberOfAudioChannels = 1;\n 2285      }\n 2286  \n 2287      if (!config.disableLogs) {\n 2288:         console.log('StereoAudioRecorder is set to record number of channels: ', numberOfAudioChannels);\n 2289      }\n 2290  \n ....\n 2318       * This method records MediaStream.\n 2319       * @method\n 2320:      * @memberof StereoAudioRecorder\n 2321       * @example\n 2322       * recorder.record();\n ....\n 2331          recordingLength = 0;\n 2332  \n 2333:         if (audioInput) {\n 2334:             audioInput.connect(jsAudioNode);\n 2335          }\n 2336  \n 2337:         // to prevent self audio to be connected with speakers\n 2338:         // jsAudioNode.connect(context.destination);\n 2339  \n 2340:         isAudioProcessStarted = isPaused = false;\n 2341          recording = true;\n 2342      };\n 2343  \n 2344      function mergeLeftRightBuffers(config, callback) {\n 2345:         function mergeAudioBuffers(config, cb) {\n 2346:             var numberOfAudioChannels = config.numberOfAudioChannels;\n 2347  \n 2348              // todo: \"slice(0)\" --- is it causes loop? Should be removed?\n ....\n 2353              var desiredSampRate = config.desiredSampRate;\n 2354  \n 2355:             if (numberOfAudioChannels === 2) {\n 2356                  leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n 2357                  rightBuffers = mergeBuffers(rightBuffers, internalInterleavedLength);\n ....\n 2362              }\n 2363  \n 2364:             if (numberOfAudioChannels === 1) {\n 2365                  leftBuffers = mergeBuffers(leftBuffers, internalInterleavedLength);\n 2366                  if (desiredSampRate) {\n ....\n 2439              var interleaved;\n 2440  \n 2441:             if (numberOfAudioChannels === 2) {\n 2442                  interleaved = interleave(leftBuffers, rightBuffers);\n 2443              }\n 2444  \n 2445:             if (numberOfAudioChannels === 1) {\n 2446                  interleaved = leftBuffers;\n 2447              }\n ....\n 2476  \n 2477              // stereo (2 channels)\n 2478:             view.setUint16(22, numberOfAudioChannels, true);\n 2479  \n 2480              // sample rate \n ....\n 2485  \n 2486              // block align (channel count * bytes per sample) \n 2487:             view.setUint16(32, numberOfAudioChannels * 2, true);\n 2488  \n 2489              // bits per sample \n ....\n 2521          if (!isChrome) {\n 2522              // its Microsoft Edge\n 2523:             mergeAudioBuffers(config, function(data) {\n 2524                  callback(data.buffer, data.view);\n 2525              });\n ....\n 2528  \n 2529  \n 2530:         var webWorker = processInWebWorker(mergeAudioBuffers);\n 2531  \n 2532          webWorker.onmessage = function(event) {\n ....\n 2556       * @param {function} callback - Callback function, that is used to pass recorded blob back to the callee.\n 2557       * @method\n 2558:      * @memberof StereoAudioRecorder\n 2559       * @example\n 2560       * recorder.stop(function(blob) {\n ....\n 2566          recording = false;\n 2567  \n 2568:         // to make sure onaudioprocess stops firing\n 2569:         // audioInput.disconnect();\n 2570  \n 2571          mergeLeftRightBuffers({\n 2572              desiredSampRate: desiredSampRate,\n 2573              sampleRate: sampleRate,\n 2574:             numberOfAudioChannels: numberOfAudioChannels,\n 2575              internalInterleavedLength: recordingLength,\n 2576              leftBuffers: leftchannel,\n 2577:             rightBuffers: numberOfAudioChannels === 1 ? [] : rightchannel\n 2578          }, function(buffer, view) {\n 2579              /**\n 2580               * @property {Blob} blob - The recorded blob object.\n 2581:              * @memberof StereoAudioRecorder\n 2582               * @example\n 2583               * recorder.stop(function(){\n ....\n 2586               */\n 2587              self.blob = new Blob([view], {\n 2588:                 type: 'audio/wav'\n 2589              });\n 2590  \n 2591              /**\n 2592               * @property {ArrayBuffer} buffer - The recorded buffer object.\n 2593:              * @memberof StereoAudioRecorder\n 2594               * @example\n 2595               * recorder.stop(function(){\n ....\n 2601              /**\n 2602               * @property {DataView} view - The recorded data-view object.\n 2603:              * @memberof StereoAudioRecorder\n 2604               * @example\n 2605               * recorder.stop(function(){\n ....\n 2612              self.bufferSize = bufferSize;\n 2613  \n 2614:             // recorded audio length\n 2615              self.length = recordingLength;\n 2616  \n ....\n 2619              }\n 2620  \n 2621:             isAudioProcessStarted = false;\n 2622          });\n 2623      };\n 2624  \n 2625:     if (!Storage.AudioContextConstructor) {\n 2626:         Storage.AudioContextConstructor = new Storage.AudioContext();\n 2627      }\n 2628  \n 2629:     var context = Storage.AudioContextConstructor;\n 2630  \n 2631:     // creates an audio node from the microphone incoming stream\n 2632:     var audioInput = context.createMediaStreamSource(mediaStream);\n 2633  \n 2634      var legalBufferValues = [0, 256, 512, 1024, 2048, 4096, 8192, 16384];\n 2635  \n 2636      /**\n 2637:      * From the spec: This value controls how frequently the audioprocess event is\n 2638       * dispatched and how many sample-frames need to be processed each call.\n 2639       * Lower values for buffer size will result in a lower (better) latency.\n 2640:      * Higher values will be necessary to avoid audio breakup and glitches\n 2641       * The size of the buffer (in sample-frames) which needs to\n 2642:      * be processed each time onprocessaudio is called.\n 2643       * Legal values are (256, 512, 1024, 2048, 4096, 8192, 16384).\n 2644:      * @property {number} bufferSize - Buffer-size for how frequently the audioprocess event is dispatched.\n 2645:      * @memberof StereoAudioRecorder\n 2646       * @example\n 2647:      * recorder = new StereoAudioRecorder(mediaStream, {\n 2648       *     bufferSize: 4096\n 2649       * });\n ....\n 2660  \n 2661      if (context.createJavaScriptNode) {\n 2662:         jsAudioNode = context.createJavaScriptNode(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n 2663      } else if (context.createScriptProcessor) {\n 2664:         jsAudioNode = context.createScriptProcessor(bufferSize, numberOfAudioChannels, numberOfAudioChannels);\n 2665      } else {\n 2666:         throw 'WebAudio API has no support on this browser.';\n 2667      }\n 2668  \n 2669      // connect the stream to the gain node\n 2670:     audioInput.connect(jsAudioNode);\n 2671  \n 2672      if (!config.bufferSize) {\n 2673:         bufferSize = jsAudioNode.bufferSize; // device buffer-size\n 2674      }\n 2675  \n 2676      /**\n 2677       * The sample rate (in sample-frames per second) at which the\n 2678:      * AudioContext handles audio. It is assumed that all AudioNodes\n 2679       * in the context run at this rate. In making this assumption,\n 2680       * sample-rate converters or \"varispeed\" processors are not supported\n 2681       * in real-time processing.\n 2682       * The sampleRate parameter describes the sample-rate of the\n 2683:      * linear PCM audio data in the buffer in sample-frames per second.\n 2684       * An implementation must support sample-rates in at least\n 2685       * the range 22050 to 96000.\n 2686:      * @property {number} sampleRate - Buffer-size for how frequently the audioprocess event is dispatched.\n 2687:      * @memberof StereoAudioRecorder\n 2688       * @example\n 2689:      * recorder = new StereoAudioRecorder(mediaStream, {\n 2690       *     sampleRate: 44100\n 2691       * });\n ....\n 2713       * This method pauses the recording process.\n 2714       * @method\n 2715:      * @memberof StereoAudioRecorder\n 2716       * @example\n 2717       * recorder.pause();\n ....\n 2724       * This method resumes the recording process.\n 2725       * @method\n 2726:      * @memberof StereoAudioRecorder\n 2727       * @example\n 2728       * recorder.resume();\n ....\n 2747       * This method resets currently recorded data.\n 2748       * @method\n 2749:      * @memberof StereoAudioRecorder\n 2750       * @example\n 2751       * recorder.clearRecordedData();\n ....\n 2758      };\n 2759  \n 2760:     var isAudioProcessStarted = false;\n 2761  \n 2762:     function onAudioProcessDataAvailable(e) {\n 2763          if (isPaused) {\n 2764              return;\n ....\n 2769                  console.log('MediaStream seems stopped.');\n 2770              }\n 2771:             jsAudioNode.disconnect();\n 2772              recording = false;\n 2773          }\n 2774  \n 2775          if (!recording) {\n 2776:             audioInput.disconnect();\n 2777              return;\n 2778          }\n 2779  \n 2780          /**\n 2781:          * This method is called on \"onaudioprocess\" event's first invocation.\n 2782:          * @method {function} onAudioProcessStarted\n 2783:          * @memberof StereoAudioRecorder\n 2784           * @example\n 2785:          * recorder.onAudioProcessStarted: function() { };\n 2786           */\n 2787:         if (!isAudioProcessStarted) {\n 2788:             isAudioProcessStarted = true;\n 2789:             if (config.onAudioProcessStarted) {\n 2790:                 config.onAudioProcessStarted();\n 2791              }\n 2792  \n ....\n 2801          leftchannel.push(new Float32Array(left));\n 2802  \n 2803:         if (numberOfAudioChannels === 2) {\n 2804              var right = e.inputBuffer.getChannelData(1);\n 2805              rightchannel.push(new Float32Array(right));\n ....\n 2812      }\n 2813  \n 2814:     jsAudioNode.onaudioprocess = onAudioProcessDataAvailable;\n 2815  \n 2816:     // to prevent self audio to be connected with speakers\n 2817:     jsAudioNode.connect(context.destination);\n 2818  \n 2819      // export raw PCM\n 2820      this.leftchannel = leftchannel;\n 2821      this.rightchannel = rightchannel;\n 2822:     this.numberOfAudioChannels = numberOfAudioChannels;\n 2823      this.desiredSampRate = desiredSampRate;\n 2824      this.sampleRate = sampleRate;\n ....\n 2826  \n 2827  if (typeof RecordRTC !== 'undefined') {\n 2828:     RecordRTC.StereoAudioRecorder = StereoAudioRecorder;\n 2829  }\n 2830  \n ....\n 3166   * });\n 3167   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n 3168:  * @param {MediaStream} mediaStream - MediaStream object fetched using getUserMedia API or generated using captureStreamUntilEnded or WebAudio API.\n 3169   * @param {object} config - {disableLogs: true, initCallback: function, video: HTMLVideoElement, etc.}\n 3170   */\n ....\n 3963   * @example\n 3964   * DiskStorage.Store({\n 3965:  *     audioBlob: yourAudioBlob,\n 3966   *     videoBlob: yourVideoBlob,\n 3967   *     gifBlob  : yourGifBlob\n 3968   * });\n 3969   * DiskStorage.Fetch(function(dataURL, type) {\n 3970:  *     if(type === 'audioBlob') { }\n 3971   *     if(type === 'videoBlob') { }\n 3972   *     if(type === 'gifBlob')   { }\n ....\n 4020              }\n 4021  \n 4022:             if (self.audioBlob) {\n 4023:                 transaction.objectStore(self.dataStoreName).put(self.audioBlob, 'audioBlob');\n 4024              }\n 4025  \n ....\n 4032              }\n 4033  \n 4034:             getFromStore('audioBlob');\n 4035              getFromStore('videoBlob');\n 4036              getFromStore('gifBlob');\n ....\n 4068       * @example\n 4069       * DiskStorage.Fetch(function(dataURL, type) {\n 4070:      *     if(type === 'audioBlob') { }\n 4071       *     if(type === 'videoBlob') { }\n 4072       *     if(type === 'gifBlob')   { }\n ....\n 4086       * @example\n 4087       * DiskStorage.Store({\n 4088:      *     audioBlob: yourAudioBlob,\n 4089       *     videoBlob: yourVideoBlob,\n 4090       *     gifBlob  : yourGifBlob\n ....\n 4092       */\n 4093      Store: function(config) {\n 4094:         this.audioBlob = config.audioBlob;\n 4095          this.videoBlob = config.videoBlob;\n 4096          this.gifBlob = config.gifBlob;\n ....\n 4385  \n 4386  /*\n 4387:  * Video conference recording, using captureStream API along with WebAudio and Canvas2D API.\n 4388   */\n 4389  \n ....\n 4450          var mixedVideoStream = getMixedVideoStream();\n 4451  \n 4452:         var mixedAudioStream = getMixedAudioStream();\n 4453:         if (mixedAudioStream) {\n 4454:             mixedAudioStream.getAudioTracks().forEach(function(track) {\n 4455                  mixedVideoStream.addTrack(track);\n 4456              });\n ....\n 4492      };\n 4493  \n 4494:     function getMixedAudioStream() {\n 4495          // via: @pehrsons\n 4496:         if (!Storage.AudioContextConstructor) {\n 4497:             Storage.AudioContextConstructor = new Storage.AudioContext();\n 4498          }\n 4499  \n 4500:         self.audioContext = Storage.AudioContextConstructor;\n 4501  \n 4502:         self.audioSources = [];\n 4503  \n 4504:         self.gainNode = self.audioContext.createGain();\n 4505:         self.gainNode.connect(self.audioContext.destination);\n 4506          self.gainNode.gain.value = 0; // don't hear self\n 4507  \n 4508:         var audioTracksLength = 0;\n 4509          arrayOfMediaStreams.forEach(function(stream) {\n 4510:             if (!stream.getAudioTracks().length) {\n 4511                  return;\n 4512              }\n 4513  \n 4514:             audioTracksLength++;\n 4515  \n 4516:             var audioSource = self.audioContext.createMediaStreamSource(stream);\n 4517:             audioSource.connect(self.gainNode);\n 4518:             self.audioSources.push(audioSource);\n 4519          });\n 4520  \n 4521:         if (!audioTracksLength) {\n 4522              return;\n 4523          }\n 4524  \n 4525:         self.audioDestination = self.audioContext.createMediaStreamDestination();\n 4526:         self.audioSources.forEach(function(audioSource) {\n 4527:             audioSource.connect(self.audioDestination);\n 4528          });\n 4529:         return self.audioDestination.stream;\n 4530      }\n 4531  \n ....\n 4719          }\n 4720  \n 4721:         if (self.audioSources.length) {\n 4722:             self.audioSources.forEach(function(source) {\n 4723                  source.disconnect();\n 4724              });\n 4725:             self.audioSources = [];\n 4726          }\n 4727  \n 4728:         if (self.audioDestination) {\n 4729:             self.audioDestination.disconnect();\n 4730:             self.audioDestination = null;\n 4731          }\n 4732  \n 4733:         self.audioContext = null;\n 4734  \n 4735          context.clearRect(0, 0, canvas.width, canvas.height);\n ....\n 4747       * @param {MediaStreams} mediaStreams - Array of MediaStreams\n 4748       * @example\n 4749:      * recorder.addStreams([newAudioStream, newVideoStream]);\n 4750       */\n 4751      this.addStreams = function(streams) {\n ....\n 4773              }\n 4774  \n 4775:             if (stream.getAudioTracks().length && self.audioContext) {\n 4776:                 var audioSource = self.audioContext.createMediaStreamSource(stream);\n 4777:                 audioSource.connect(self.audioDestination);\n 4778:                 self.audioSources.push(audioSource);\n 4779              }\n 4780          });\n ....\n 4819   * @see {@link https://github.com/muaz-khan/RecordRTC|RecordRTC Source Code}\n 4820   * @param {MediaStream} mediaStream - Single media-stream object, array of media-streams, html-canvas-element, etc.\n 4821:  * @param {object} config - {type:\"video\", recorderType: MediaStreamRecorder, disableLogs: true, numberOfAudioChannels: 1, bufferSize: 0, sampleRate: 0, video: HTMLVideoElement, etc.}\n 4822   * @throws Will throw an error if \"new\" keyword is not used to initiate \"RecordRTCPromisesHandler\". Also throws error if first argument \"MediaStream\" is missing.\n 4823   * @requires module:RecordRTC\n\nD:\\Videos\\Shortly_say\\video_shaker\\node_modules\\recordrtc\\RecordRTC.min.js:\n    <binary>\n\nD:\\Videos\\Shortly_say\\video_shaker\\refactor\\modules.md:\n    1: # audio-basic\n    2: # audio_images_video_mixer.py\n    3  # basic (broken)\n\nD:\\Videos\\Shortly_say\\video_shaker\\venv\\Include\\pyconfig.h:\n  685  #define HAVE_STDDEF_H 1\n  686  \n  687: /* Define if you have the <sys/audioio.h> header file.  */\n  688: /* #undef HAVE_SYS_AUDIOIO_H */\n  689  \n  690  /* Define if you have the <sys/param.h> header file.  */\n\nD:\\Videos\\Shortly_say\\video_shaker\\venv\\Lib\\site-packages\\pip\\_vendor\\html5lib\\constants.py:\n  592      \"style\": frozenset([\"scoped\"]),\n  593      \"img\": frozenset([\"ismap\"]),\n  594:     \"audio\": frozenset([\"autoplay\", \"controls\"]),\n  595      \"video\": frozenset([\"autoplay\", \"controls\"]),\n  596      \"script\": frozenset([\"defer\", \"async\"]),\n\nD:\\Videos\\Shortly_say\\video_shaker\\venv\\Lib\\site-packages\\pip\\_vendor\\html5lib\\filters\\sanitizer.py:\n   20      (namespaces['html'], 'article'),\n   21      (namespaces['html'], 'aside'),\n   22:     (namespaces['html'], 'audio'),\n   23      (namespaces['html'], 'b'),\n   24      (namespaces['html'], 'big'),\n\n830 matches across 25 files\n",
			"settings":
			{
				"buffer_size": 80665,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "audio_basic.py",
			"settings":
			{
				"buffer_size": 2471,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "generate_sequence.py",
			"settings":
			{
				"buffer_size": 3882,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "refactor/__init__.py",
			"settings":
			{
				"buffer_size": 0,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "generate_rand_sequence(processClip, minLength, cli"
			}
		},
		{
			"file": "refactor/generate_sequence.py",
			"settings":
			{
				"buffer_size": 5155,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "datamosh.py",
			"settings":
			{
				"buffer_size": 1477,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "refactor/fx.py",
			"settings":
			{
				"buffer_size": 94,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					""
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Re-run sketch"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch (Processing 3 only)"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Run sketch fullscreen"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Export sketch as application"
				],
				[
					"Packages/Processing/Build Systems/Processing.sublime-build",
					"Kill running sketches"
				]
			],
			[
				"Packages/Processing/Build Systems/Processing.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "termin",
		"selected_items":
		[
			[
				"termin",
				"Terminal: Open"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"pyya",
				"PyYapf: Format Document"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"py",
				"PyYapf: Format Document"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"pep8",
				"User: Python PEP8 Autoformat"
			],
			[
				"i",
				"Package Control: Install Package"
			],
			[
				"te",
				"Terminal: Open"
			],
			[
				"term",
				"Terminal: Open"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"hex",
				"HexViewer: Toggle Hex View"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"re",
				"File: Rename"
			],
			[
				"process",
				"Processing: New Java Ant project"
			],
			[
				"pr",
				"Set Syntax: Processing"
			],
			[
				"processin",
				"Set Syntax: Processing"
			],
			[
				"syntax",
				"Set Syntax: Python"
			],
			[
				"rename",
				"File: Rename"
			]
		],
		"width": 452.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Videos/Shortly_say/video_shaker",
		"/D/Videos/Shortly_say/video_shaker/__pycache__"
	],
	"file_history":
	[
		"/C/Users/oneyro/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
		"/C/Users/oneyro/git/Headless-rendering-with-python/main_multisample.py",
		"/C/Python34/Lib/site-packages/ModernGL/ModernGL.cp35-win32.pyd",
		"/C/Python34/Lib/site-packages/ModernGL/__pycache__/__init__.cpython-34.pyo",
		"/F/Videos/Shortly_say/video_shaker/output_video/encoded/+galina.mp4+_vegas-enc - Copy.mp4",
		"/F/Videos/krov_i_beton/Ublydok - Copy.mp4",
		"/F/Videos/Shortly_say/video_shaker/output_video/5_tabletok_piva_5_butylok_vodki.mp4",
		"/F/Videos/Shortly_say/video_shaker/files_scanner.py",
		"/F/Dropbox/scripts/Processing/image_processing_learn/image_processing_learn.pde",
		"/F/Dropbox/scripts/Processing/Lighting/Lighting.pde",
		"/F/Dropbox/scripts/Processing/Image_processing/Image_processing.pde",
		"/F/Dropbox/scripts/Python/GUI/tkinter_test.py",
		"/F/Videos/ecoding/del-i-frames.sh",
		"/F/Videos/ecoding/encoding-to-vegas.sh",
		"/F/Videos/ecoding/extract-i-frames.sh",
		"/F/Videos/Shortly_say/video_shaker/datamosh.py",
		"/F/python_docker/data/moviepy-starwars.py",
		"/F/Videos/Shortly_say/video_shaker/freeze_files_list.py",
		"/C/Python27/Lib/site-packages/moviepy/config.py",
		"/C/Python27/Lib/site-packages/moviepy/__init__.py",
		"/F/python_docker/.bashrc",
		"/F/Program_noncritical/Renoise 2.8.0/Readme.txt",
		"/F/python_docker/data/moviepy_starwars.py",
		"/F/python_docker/data/generate_sequence.py",
		"/F/python_docker/data/files_scanner.py",
		"/F/python_docker/data/Good_random_glitches_experiments.py",
		"/F/Down loads/Bonzomatic_W64_2017-04-08/README.md",
		"/C/Users/oneyro/git/Bonzomatic/_package.x64/README.md",
		"/F/Dropbox/scripts/Processing/movie_vertext_rewinding/data/vertTexCoord.st",
		"/C/Users/oneyro/git/pshader-tutorials/intro/Ex_05_1_texture/data/texvert.glsl",
		"/C/Users/oneyro/git/pshader-tutorials/intro/Ex_05_1_texture/data/texfrag.glsl",
		"/F/Dropbox/scripts/Processing/movie_vertext_rewinding/Data/shadertoy.glsl",
		"/F/Down loads/Sony Vegas Pro v11.0.520 x86 Plugins Portable ENG_RUS/Readme.txt",
		"/F/Videos/Shortly_say/video_shaker/Good_random_glitches_proto(works).py",
		"/F/Videos/Shortly_say/video_shaker/Good_random_glitches_experiments.py",
		"/F/Down loads/Magix Vegas Pro 14 Build 201 x64 Ukr/proDAD Mercalli V4 4.0.470.1 x64 VEGAS Pro 14/Readme.txt",
		"/F/Videos/Shortly_say/video_shaker/Good_random_glitches_experimage.py",
		"/F/Dropbox/scripts/Processing/Video_texture/Video_texture.pde",
		"/F/Videos/ecoding/encoding.sh",
		"/F/Videos/Shortly_say/video_shaker/Good_random_glitches_oneclip_wordmix.py",
		"/F/Dropbox/scripts/Python/Py_opengl/py_openGL_xmas.py",
		"/F/Videos/Shortly_say/Good_random_glitches_oneclip_fl_image.py",
		"/F/Videos/Shortly_say/video_shaker/Good_random_glitches_oneclip_fl_image.py",
		"/F/Down loads/Boris Continuum Complete 10.0.2 Win64/readme.txt",
		"/C/Users/oneyro/git/Bonzomatic/CMakeLists.txt",
		"/G/ARCH/BOOT/SYSLINUX/ARCHISO.CFG",
		"/G/ISOLINUX/syslinux.cfg",
		"/F/Dropbox/scripts/Python/Py_opencv/install_opencv.py",
		"/F/Down loads/print.py",
		"/F/Down loads/Chasing_Amy_1997_RUS.srt",
		"/F/Dropbox/scripts/Python/text_analisis/Wavelet",
		"/F/Dropbox/scripts/Python/Frame_comber/frame_comber.py",
		"/F/Videos/Shortly_say/video_shaker/quine",
		"/F/Videos/Shortly_say/video_shaker/exceptionQuine.py",
		"/F/Down loads/Magix Vegas Pro 14 Build 201 x64 Ukr/ReadMe.txt",
		"/C/Windows/System32/drivers/etc/hosts",
		"/F/Dropbox/scripts/Processing/PIxels_moving/PIxels_moving.pde",
		"/F/Dropbox/scripts/Python/text_analisis/coounter.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/buildHouse.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/buildHouse.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/magicBridge.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/Horse.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/AlienInvasion.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/MinecraftPyramids.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/CraftyCrossing.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/CraftyCrossingHardware.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/lift.py",
		"/F/Down loads/AIMStarterKitPC (2)/AdventuresInMinecraft/MyAdventures/mcpi/block.py",
		"/C/Python27/Lib/HTMLParser.py",
		"/C/Python27/Lib/site-packages/html.py",
		"/F/Dropbox/scripts/Python/text_analisis/smartobjects-ps.txt",
		"/F/Dropbox/scripts/Python/text_analisis/VCO.txt",
		"/F/Down loads/Dune Messiah.txt",
		"/G/Frenk_Herbert__Dune_Messiah.txt",
		"/C/Users/oneyro/AppData/Local/Temp/Temp1_Herbert Frank. Dune Messiah - royallib.com.txt.zip/Herbert Frank. Dune Messiah - royallib.ru.txt",
		"/F/Down loads/CodeFiles/Adventure8/WoodenHorse.py",
		"/F/Down loads/CodeFiles/Adventure1/HelloMinecraftWorld.py",
		"/F/Down loads/CodeFiles/Adventure3/buildHouse.py"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"D:\\Videos\\Shortly_say\\video_shaker"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"np.",
			"clips",
			"filename",
			"PIL_filters",
			"clipLength",
			"generate_sequence",
			"clipsAudio",
			"piece_lingth",
			"clips[.' ']",
			"clips ",
			"clips",
			") ",
			"print",
			"(\"",
			"processClip",
			"audio"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"processAudioClip"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "D:\\Videos\\Shortly_say\\video_shaker"
		}
	],
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "refactor/requirements.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "refactor/modules.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "audio_synth_mixes_resized_wand.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4102,
						"regions":
						{
						},
						"selection":
						[
							[
								512,
								513
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Flimage_numpy_PIL_blur_wand.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5463,
						"regions":
						{
						},
						"selection":
						[
							[
								820,
								823
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 89.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "wand_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24,
						"regions":
						{
						},
						"selection":
						[
							[
								24,
								13
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Python27/Lib/site-packages/wand/image.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 140070,
						"regions":
						{
						},
						"selection":
						[
							[
								116701,
								116709
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45292.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "files_scanner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1062,
						"regions":
						{
						},
						"selection":
						[
							[
								1062,
								1062
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 80665,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										160,
										165
									],
									[
										257,
										262
									],
									[
										350,
										355
									],
									[
										398,
										403
									],
									[
										467,
										472
									],
									[
										660,
										665
									],
									[
										765,
										770
									],
									[
										811,
										816
									],
									[
										1010,
										1015
									],
									[
										1022,
										1027
									],
									[
										1242,
										1247
									],
									[
										1346,
										1351
									],
									[
										1635,
										1640
									],
									[
										1977,
										1982
									],
									[
										2133,
										2138
									],
									[
										2312,
										2317
									],
									[
										2594,
										2599
									],
									[
										2874,
										2879
									],
									[
										3148,
										3153
									],
									[
										3434,
										3439
									],
									[
										3758,
										3763
									],
									[
										4087,
										4092
									],
									[
										4379,
										4384
									],
									[
										5022,
										5027
									],
									[
										5624,
										5629
									],
									[
										5696,
										5701
									],
									[
										6072,
										6077
									],
									[
										6375,
										6380
									],
									[
										6637,
										6642
									],
									[
										6779,
										6784
									],
									[
										6867,
										6872
									],
									[
										7059,
										7064
									],
									[
										7266,
										7271
									],
									[
										7458,
										7463
									],
									[
										7723,
										7728
									],
									[
										7817,
										7822
									],
									[
										7971,
										7976
									],
									[
										8139,
										8144
									],
									[
										8422,
										8427
									],
									[
										8532,
										8537
									],
									[
										8582,
										8587
									],
									[
										8781,
										8786
									],
									[
										8840,
										8845
									],
									[
										9004,
										9009
									],
									[
										9062,
										9067
									],
									[
										9255,
										9260
									],
									[
										9394,
										9399
									],
									[
										9438,
										9443
									],
									[
										9673,
										9678
									],
									[
										9831,
										9836
									],
									[
										9886,
										9891
									],
									[
										10120,
										10125
									],
									[
										10363,
										10368
									],
									[
										10392,
										10397
									],
									[
										10682,
										10687
									],
									[
										10941,
										10946
									],
									[
										11089,
										11094
									],
									[
										11172,
										11177
									],
									[
										11470,
										11475
									],
									[
										11632,
										11637
									],
									[
										11644,
										11649
									],
									[
										11692,
										11697
									],
									[
										11704,
										11709
									],
									[
										11766,
										11771
									],
									[
										11828,
										11833
									],
									[
										12046,
										12051
									],
									[
										12104,
										12109
									],
									[
										12118,
										12123
									],
									[
										12284,
										12289
									],
									[
										12357,
										12362
									],
									[
										12436,
										12441
									],
									[
										12492,
										12497
									],
									[
										12672,
										12677
									],
									[
										12729,
										12734
									],
									[
										12752,
										12757
									],
									[
										12817,
										12822
									],
									[
										12888,
										12893
									],
									[
										13071,
										13076
									],
									[
										13150,
										13155
									],
									[
										13173,
										13178
									],
									[
										13243,
										13248
									],
									[
										13300,
										13305
									],
									[
										13368,
										13373
									],
									[
										13646,
										13651
									],
									[
										13949,
										13954
									],
									[
										14121,
										14126
									],
									[
										14622,
										14627
									],
									[
										14864,
										14869
									],
									[
										15084,
										15089
									],
									[
										15107,
										15112
									],
									[
										15244,
										15249
									],
									[
										15321,
										15326
									],
									[
										15336,
										15341
									],
									[
										15612,
										15617
									],
									[
										15755,
										15760
									],
									[
										15921,
										15926
									],
									[
										16260,
										16265
									],
									[
										16351,
										16356
									],
									[
										16358,
										16363
									],
									[
										16560,
										16565
									],
									[
										16605,
										16610
									],
									[
										16818,
										16823
									],
									[
										17083,
										17088
									],
									[
										17372,
										17377
									],
									[
										17767,
										17772
									],
									[
										18631,
										18636
									],
									[
										19290,
										19295
									],
									[
										19936,
										19941
									],
									[
										20132,
										20137
									],
									[
										20570,
										20575
									],
									[
										20765,
										20770
									],
									[
										21157,
										21162
									],
									[
										21210,
										21215
									],
									[
										21357,
										21362
									],
									[
										21445,
										21450
									],
									[
										21627,
										21632
									],
									[
										21915,
										21920
									],
									[
										21971,
										21976
									],
									[
										22428,
										22433
									],
									[
										22773,
										22778
									],
									[
										22904,
										22909
									],
									[
										23191,
										23196
									],
									[
										23331,
										23336
									],
									[
										23486,
										23491
									],
									[
										23523,
										23528
									],
									[
										23692,
										23697
									],
									[
										23731,
										23736
									],
									[
										23971,
										23976
									],
									[
										24399,
										24404
									],
									[
										24625,
										24630
									],
									[
										24697,
										24702
									],
									[
										24853,
										24858
									],
									[
										25441,
										25446
									],
									[
										25473,
										25478
									],
									[
										25590,
										25595
									],
									[
										25709,
										25714
									],
									[
										25879,
										25884
									],
									[
										25931,
										25936
									],
									[
										26144,
										26149
									],
									[
										26360,
										26365
									],
									[
										26589,
										26594
									],
									[
										26637,
										26642
									],
									[
										26766,
										26771
									],
									[
										26834,
										26839
									],
									[
										26856,
										26861
									],
									[
										26942,
										26947
									],
									[
										26965,
										26970
									],
									[
										26977,
										26982
									],
									[
										27107,
										27112
									],
									[
										27319,
										27324
									],
									[
										27888,
										27893
									],
									[
										27921,
										27926
									],
									[
										27982,
										27987
									],
									[
										28528,
										28533
									],
									[
										28587,
										28592
									],
									[
										28619,
										28624
									],
									[
										28657,
										28662
									],
									[
										28867,
										28872
									],
									[
										29006,
										29011
									],
									[
										29271,
										29276
									],
									[
										29485,
										29490
									],
									[
										29731,
										29736
									],
									[
										30055,
										30060
									],
									[
										30232,
										30237
									],
									[
										30332,
										30337
									],
									[
										30435,
										30440
									],
									[
										30589,
										30594
									],
									[
										30689,
										30694
									],
									[
										30759,
										30764
									],
									[
										30862,
										30867
									],
									[
										31023,
										31028
									],
									[
										31208,
										31213
									],
									[
										31302,
										31307
									],
									[
										31410,
										31415
									],
									[
										31480,
										31485
									],
									[
										31578,
										31583
									],
									[
										31620,
										31625
									],
									[
										31648,
										31653
									],
									[
										31662,
										31667
									],
									[
										31721,
										31726
									],
									[
										31767,
										31772
									],
									[
										31861,
										31866
									],
									[
										32255,
										32260
									],
									[
										32338,
										32343
									],
									[
										32411,
										32416
									],
									[
										32462,
										32467
									],
									[
										32504,
										32509
									],
									[
										32541,
										32546
									],
									[
										32645,
										32650
									],
									[
										32671,
										32676
									],
									[
										32715,
										32720
									],
									[
										32747,
										32752
									],
									[
										32894,
										32899
									],
									[
										33004,
										33009
									],
									[
										33237,
										33242
									],
									[
										33454,
										33459
									],
									[
										33597,
										33602
									],
									[
										33635,
										33640
									],
									[
										33721,
										33726
									],
									[
										33845,
										33850
									],
									[
										33939,
										33944
									],
									[
										34064,
										34069
									],
									[
										34085,
										34090
									],
									[
										34115,
										34120
									],
									[
										34397,
										34402
									],
									[
										34579,
										34584
									],
									[
										34617,
										34622
									],
									[
										34703,
										34708
									],
									[
										34912,
										34917
									],
									[
										35082,
										35087
									],
									[
										35128,
										35133
									],
									[
										35166,
										35171
									],
									[
										35287,
										35292
									],
									[
										35409,
										35414
									],
									[
										35462,
										35467
									],
									[
										35556,
										35561
									],
									[
										35694,
										35699
									],
									[
										35763,
										35768
									],
									[
										35963,
										35968
									],
									[
										36127,
										36132
									],
									[
										36318,
										36323
									],
									[
										36364,
										36369
									],
									[
										36416,
										36421
									],
									[
										36535,
										36540
									],
									[
										36805,
										36810
									],
									[
										36892,
										36897
									],
									[
										36954,
										36959
									],
									[
										37055,
										37060
									],
									[
										37076,
										37081
									],
									[
										37206,
										37211
									],
									[
										37351,
										37356
									],
									[
										37437,
										37442
									],
									[
										37480,
										37485
									],
									[
										37613,
										37618
									],
									[
										37666,
										37671
									],
									[
										37710,
										37715
									],
									[
										37751,
										37756
									],
									[
										37910,
										37915
									],
									[
										38186,
										38191
									],
									[
										38321,
										38326
									],
									[
										38367,
										38372
									],
									[
										38551,
										38556
									],
									[
										38592,
										38597
									],
									[
										38753,
										38758
									],
									[
										38925,
										38930
									],
									[
										39216,
										39221
									],
									[
										39250,
										39255
									],
									[
										39272,
										39277
									],
									[
										39653,
										39658
									],
									[
										39830,
										39835
									],
									[
										40142,
										40147
									],
									[
										40249,
										40254
									],
									[
										40646,
										40651
									],
									[
										40925,
										40930
									],
									[
										41213,
										41218
									],
									[
										41408,
										41413
									],
									[
										41724,
										41729
									],
									[
										42020,
										42025
									],
									[
										42114,
										42119
									],
									[
										42369,
										42374
									],
									[
										42612,
										42617
									],
									[
										42838,
										42843
									],
									[
										42990,
										42995
									],
									[
										42997,
										43002
									],
									[
										43195,
										43200
									],
									[
										43259,
										43264
									],
									[
										43285,
										43290
									],
									[
										43517,
										43522
									],
									[
										43528,
										43533
									],
									[
										43727,
										43732
									],
									[
										43776,
										43781
									],
									[
										43802,
										43807
									],
									[
										43957,
										43962
									],
									[
										43968,
										43973
									],
									[
										44132,
										44137
									],
									[
										44179,
										44184
									],
									[
										44205,
										44210
									],
									[
										44356,
										44361
									],
									[
										44367,
										44372
									],
									[
										44533,
										44538
									],
									[
										44565,
										44570
									],
									[
										44591,
										44596
									],
									[
										44669,
										44674
									],
									[
										44680,
										44685
									],
									[
										45039,
										45044
									],
									[
										45127,
										45132
									],
									[
										45412,
										45417
									],
									[
										45463,
										45468
									],
									[
										45582,
										45587
									],
									[
										45736,
										45741
									],
									[
										45838,
										45843
									],
									[
										45892,
										45897
									],
									[
										45993,
										45998
									],
									[
										46143,
										46148
									],
									[
										46310,
										46315
									],
									[
										46634,
										46639
									],
									[
										46722,
										46727
									],
									[
										46879,
										46884
									],
									[
										47006,
										47011
									],
									[
										47191,
										47196
									],
									[
										47218,
										47223
									],
									[
										47270,
										47275
									],
									[
										47615,
										47620
									],
									[
										47645,
										47650
									],
									[
										47692,
										47697
									],
									[
										47753,
										47758
									],
									[
										47876,
										47881
									],
									[
										48024,
										48029
									],
									[
										48212,
										48217
									],
									[
										48237,
										48242
									],
									[
										48517,
										48522
									],
									[
										48525,
										48530
									],
									[
										48903,
										48908
									],
									[
										49190,
										49195
									],
									[
										49358,
										49363
									],
									[
										49440,
										49445
									],
									[
										49637,
										49642
									],
									[
										49667,
										49672
									],
									[
										49904,
										49909
									],
									[
										50065,
										50070
									],
									[
										50201,
										50206
									],
									[
										50271,
										50276
									],
									[
										50302,
										50307
									],
									[
										50355,
										50360
									],
									[
										50456,
										50461
									],
									[
										50558,
										50563
									],
									[
										50639,
										50644
									],
									[
										50728,
										50733
									],
									[
										50800,
										50805
									],
									[
										50860,
										50865
									],
									[
										50935,
										50940
									],
									[
										51078,
										51083
									],
									[
										51106,
										51111
									],
									[
										51273,
										51278
									],
									[
										51468,
										51473
									],
									[
										51666,
										51671
									],
									[
										51692,
										51697
									],
									[
										51868,
										51873
									],
									[
										52014,
										52019
									],
									[
										52135,
										52140
									],
									[
										52247,
										52252
									],
									[
										52296,
										52301
									],
									[
										52506,
										52511
									],
									[
										52737,
										52742
									],
									[
										52936,
										52941
									],
									[
										52958,
										52963
									],
									[
										53156,
										53161
									],
									[
										53197,
										53202
									],
									[
										53287,
										53292
									],
									[
										53427,
										53432
									],
									[
										53468,
										53473
									],
									[
										53617,
										53622
									],
									[
										53658,
										53663
									],
									[
										53819,
										53824
									],
									[
										53841,
										53846
									],
									[
										54004,
										54009
									],
									[
										54035,
										54040
									],
									[
										54183,
										54188
									],
									[
										54226,
										54231
									],
									[
										54239,
										54244
									],
									[
										54395,
										54400
									],
									[
										54420,
										54425
									],
									[
										54662,
										54667
									],
									[
										54724,
										54729
									],
									[
										54741,
										54746
									],
									[
										54910,
										54915
									],
									[
										54918,
										54923
									],
									[
										55116,
										55121
									],
									[
										55164,
										55169
									],
									[
										55181,
										55186
									],
									[
										55266,
										55271
									],
									[
										55274,
										55279
									],
									[
										55452,
										55457
									],
									[
										55464,
										55469
									],
									[
										55714,
										55719
									],
									[
										55722,
										55727
									],
									[
										55901,
										55906
									],
									[
										55909,
										55914
									],
									[
										56109,
										56114
									],
									[
										56235,
										56240
									],
									[
										56249,
										56254
									],
									[
										56290,
										56295
									],
									[
										56321,
										56326
									],
									[
										56347,
										56352
									],
									[
										56529,
										56534
									],
									[
										56773,
										56778
									],
									[
										56999,
										57004
									],
									[
										57153,
										57158
									],
									[
										57160,
										57165
									],
									[
										57268,
										57273
									],
									[
										57301,
										57306
									],
									[
										57323,
										57328
									],
									[
										57363,
										57368
									],
									[
										57423,
										57428
									],
									[
										57479,
										57484
									],
									[
										57515,
										57520
									],
									[
										57536,
										57541
									],
									[
										57596,
										57601
									],
									[
										57652,
										57657
									],
									[
										57688,
										57693
									],
									[
										57706,
										57711
									],
									[
										57814,
										57819
									],
									[
										58077,
										58082
									],
									[
										58319,
										58324
									],
									[
										58563,
										58568
									],
									[
										58753,
										58758
									],
									[
										58776,
										58781
									],
									[
										58816,
										58821
									],
									[
										58830,
										58835
									],
									[
										58866,
										58871
									],
									[
										59039,
										59044
									],
									[
										59090,
										59095
									],
									[
										59105,
										59110
									],
									[
										59150,
										59155
									],
									[
										59201,
										59206
									],
									[
										59222,
										59227
									],
									[
										59372,
										59377
									],
									[
										59793,
										59798
									],
									[
										60276,
										60281
									],
									[
										60374,
										60379
									],
									[
										60457,
										60462
									],
									[
										60671,
										60676
									],
									[
										60825,
										60830
									],
									[
										61017,
										61022
									],
									[
										61084,
										61089
									],
									[
										61099,
										61104
									],
									[
										61220,
										61225
									],
									[
										61369,
										61374
									],
									[
										61515,
										61520
									],
									[
										61525,
										61530
									],
									[
										61687,
										61692
									],
									[
										61824,
										61829
									],
									[
										61876,
										61881
									],
									[
										61956,
										61961
									],
									[
										62042,
										62047
									],
									[
										62222,
										62227
									],
									[
										62307,
										62312
									],
									[
										62648,
										62653
									],
									[
										62740,
										62745
									],
									[
										62805,
										62810
									],
									[
										62873,
										62878
									],
									[
										62938,
										62943
									],
									[
										63068,
										63073
									],
									[
										63110,
										63115
									],
									[
										63368,
										63373
									],
									[
										63464,
										63469
									],
									[
										63692,
										63697
									],
									[
										63762,
										63767
									],
									[
										63808,
										63813
									],
									[
										63920,
										63925
									],
									[
										63982,
										63987
									],
									[
										64124,
										64129
									],
									[
										64263,
										64268
									],
									[
										64296,
										64301
									],
									[
										64317,
										64322
									],
									[
										64388,
										64393
									],
									[
										64444,
										64449
									],
									[
										64509,
										64514
									],
									[
										64695,
										64700
									],
									[
										64753,
										64758
									],
									[
										64784,
										64789
									],
									[
										64998,
										65003
									],
									[
										65271,
										65276
									],
									[
										65512,
										65517
									],
									[
										65671,
										65676
									],
									[
										65867,
										65872
									],
									[
										66062,
										66067
									],
									[
										66238,
										66243
									],
									[
										66433,
										66438
									],
									[
										66686,
										66691
									],
									[
										66849,
										66854
									],
									[
										66893,
										66898
									],
									[
										67088,
										67093
									],
									[
										67111,
										67116
									],
									[
										67275,
										67280
									],
									[
										67491,
										67496
									],
									[
										67693,
										67698
									],
									[
										67879,
										67884
									],
									[
										68120,
										68125
									],
									[
										68307,
										68312
									],
									[
										68434,
										68439
									],
									[
										68528,
										68533
									],
									[
										68578,
										68583
									],
									[
										68616,
										68621
									],
									[
										68686,
										68691
									],
									[
										68744,
										68749
									],
									[
										68806,
										68811
									],
									[
										69045,
										69050
									],
									[
										69290,
										69295
									],
									[
										69434,
										69439
									],
									[
										69606,
										69611
									],
									[
										69670,
										69675
									],
									[
										69742,
										69747
									],
									[
										69902,
										69907
									],
									[
										69963,
										69968
									],
									[
										69986,
										69991
									],
									[
										70074,
										70079
									],
									[
										70136,
										70141
									],
									[
										70159,
										70164
									],
									[
										70220,
										70225
									],
									[
										70346,
										70351
									],
									[
										70367,
										70372
									],
									[
										70454,
										70459
									],
									[
										70621,
										70626
									],
									[
										70642,
										70647
									],
									[
										70672,
										70677
									],
									[
										70974,
										70979
									],
									[
										71219,
										71224
									],
									[
										71283,
										71288
									],
									[
										71355,
										71360
									],
									[
										71552,
										71557
									],
									[
										71736,
										71741
									],
									[
										71922,
										71927
									],
									[
										72048,
										72053
									],
									[
										72107,
										72112
									],
									[
										72310,
										72315
									],
									[
										72449,
										72454
									],
									[
										72591,
										72596
									],
									[
										72670,
										72675
									],
									[
										72724,
										72729
									],
									[
										72794,
										72799
									],
									[
										72872,
										72877
									],
									[
										72916,
										72921
									],
									[
										72976,
										72981
									],
									[
										73031,
										73036
									],
									[
										73181,
										73186
									],
									[
										73371,
										73376
									],
									[
										73383,
										73388
									],
									[
										73400,
										73405
									],
									[
										73465,
										73470
									],
									[
										73514,
										73519
									],
									[
										73703,
										73708
									],
									[
										73727,
										73732
									],
									[
										73922,
										73927
									],
									[
										73944,
										73949
									],
									[
										74224,
										74229
									],
									[
										74425,
										74430
									],
									[
										74440,
										74445
									],
									[
										74623,
										74628
									],
									[
										74788,
										74793
									],
									[
										74877,
										74882
									],
									[
										74889,
										74894
									],
									[
										74999,
										75004
									],
									[
										75220,
										75225
									],
									[
										75411,
										75416
									],
									[
										75426,
										75431
									],
									[
										75600,
										75605
									],
									[
										75619,
										75624
									],
									[
										75826,
										75831
									],
									[
										75968,
										75973
									],
									[
										75990,
										75995
									],
									[
										76029,
										76034
									],
									[
										76068,
										76073
									],
									[
										76083,
										76088
									],
									[
										76259,
										76264
									],
									[
										76336,
										76341
									],
									[
										76390,
										76395
									],
									[
										76428,
										76433
									],
									[
										76489,
										76494
									],
									[
										76512,
										76517
									],
									[
										76565,
										76570
									],
									[
										76628,
										76633
									],
									[
										76697,
										76702
									],
									[
										76815,
										76820
									],
									[
										76934,
										76939
									],
									[
										77037,
										77042
									],
									[
										77089,
										77094
									],
									[
										77108,
										77113
									],
									[
										77173,
										77178
									],
									[
										77233,
										77238
									],
									[
										77251,
										77256
									],
									[
										77312,
										77317
									],
									[
										77405,
										77410
									],
									[
										77429,
										77434
									],
									[
										77494,
										77499
									],
									[
										77524,
										77529
									],
									[
										77558,
										77563
									],
									[
										77583,
										77588
									],
									[
										77648,
										77653
									],
									[
										77749,
										77754
									],
									[
										77796,
										77801
									],
									[
										77927,
										77932
									],
									[
										77995,
										78000
									],
									[
										78039,
										78044
									],
									[
										78094,
										78099
									],
									[
										78164,
										78169
									],
									[
										78402,
										78407
									],
									[
										78565,
										78570
									],
									[
										78594,
										78599
									],
									[
										78637,
										78642
									],
									[
										78656,
										78661
									],
									[
										78725,
										78730
									],
									[
										78750,
										78755
									],
									[
										78797,
										78802
									],
									[
										78815,
										78820
									],
									[
										79194,
										79199
									],
									[
										79635,
										79640
									],
									[
										79656,
										79661
									],
									[
										79846,
										79851
									],
									[
										79900,
										79905
									],
									[
										80174,
										80179
									],
									[
										80549,
										80554
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								163,
								163
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "audio_basic.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2471,
						"regions":
						{
						},
						"selection":
						[
							[
								643,
								643
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "generate_sequence.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3882,
						"regions":
						{
						},
						"selection":
						[
							[
								1217,
								1217
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 12,
					"file": "refactor/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "generate_rand_sequence(processClip, minLength, cli",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "refactor/generate_sequence.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5155,
						"regions":
						{
						},
						"selection":
						[
							[
								4678,
								4678
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 1065.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "datamosh.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1477,
						"regions":
						{
						},
						"selection":
						[
							[
								943,
								943
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "refactor/fx.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
							[
								94,
								94
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 174.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"output.hex_viewer_inspector":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 284.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
